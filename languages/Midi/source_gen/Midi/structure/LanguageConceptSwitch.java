package Midi.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int A = 0;
  public static final int A0 = 1;
  public static final int A1 = 2;
  public static final int A2 = 3;
  public static final int A3 = 4;
  public static final int A4 = 5;
  public static final int A5 = 6;
  public static final int A6 = 7;
  public static final int A7 = 8;
  public static final int A8 = 9;
  public static final int ANeg1 = 10;
  public static final int ASharp = 11;
  public static final int ASharp0 = 12;
  public static final int ASharp1 = 13;
  public static final int ASharp2 = 14;
  public static final int ASharp3 = 15;
  public static final int ASharp4 = 16;
  public static final int ASharp5 = 17;
  public static final int ASharp6 = 18;
  public static final int ASharp7 = 19;
  public static final int ASharp8 = 20;
  public static final int ASharpNeg1 = 21;
  public static final int B = 22;
  public static final int B0 = 23;
  public static final int B1 = 24;
  public static final int B2 = 25;
  public static final int B3 = 26;
  public static final int B4 = 27;
  public static final int B5 = 28;
  public static final int B6 = 29;
  public static final int B7 = 30;
  public static final int B8 = 31;
  public static final int BNeg1 = 32;
  public static final int ByteSized = 33;
  public static final int C = 34;
  public static final int C0 = 35;
  public static final int C1 = 36;
  public static final int C2 = 37;
  public static final int C3 = 38;
  public static final int C4 = 39;
  public static final int C5 = 40;
  public static final int C6 = 41;
  public static final int C7 = 42;
  public static final int C8 = 43;
  public static final int C9 = 44;
  public static final int CNeg1 = 45;
  public static final int CSharp = 46;
  public static final int CSharp0 = 47;
  public static final int CSharp1 = 48;
  public static final int CSharp2 = 49;
  public static final int CSharp3 = 50;
  public static final int CSharp4 = 51;
  public static final int CSharp5 = 52;
  public static final int CSharp6 = 53;
  public static final int CSharp7 = 54;
  public static final int CSharp8 = 55;
  public static final int CSharp9 = 56;
  public static final int CSharpNeg1 = 57;
  public static final int ChannelMode = 58;
  public static final int ChannelPressure = 59;
  public static final int Chunk = 60;
  public static final int ControlChange = 61;
  public static final int Controller = 62;
  public static final int ControllerValuable = 63;
  public static final int ControllerValue = 64;
  public static final int Controllerable = 65;
  public static final int CopyrightNotice = 66;
  public static final int CuePoint = 67;
  public static final int D = 68;
  public static final int D0 = 69;
  public static final int D1 = 70;
  public static final int D2 = 71;
  public static final int D3 = 72;
  public static final int D4 = 73;
  public static final int D5 = 74;
  public static final int D6 = 75;
  public static final int D7 = 76;
  public static final int D8 = 77;
  public static final int D9 = 78;
  public static final int DNeg1 = 79;
  public static final int DSharp = 80;
  public static final int DSharp0 = 81;
  public static final int DSharp1 = 82;
  public static final int DSharp2 = 83;
  public static final int DSharp3 = 84;
  public static final int DSharp4 = 85;
  public static final int DSharp5 = 86;
  public static final int DSharp6 = 87;
  public static final int DSharp7 = 88;
  public static final int DSharp8 = 89;
  public static final int DSharp9 = 90;
  public static final int DSharpNeg1 = 91;
  public static final int E = 92;
  public static final int E0 = 93;
  public static final int E1 = 94;
  public static final int E2 = 95;
  public static final int E3 = 96;
  public static final int E4 = 97;
  public static final int E5 = 98;
  public static final int E6 = 99;
  public static final int E7 = 100;
  public static final int E8 = 101;
  public static final int E9 = 102;
  public static final int ENeg1 = 103;
  public static final int EmptyTrackEvent = 104;
  public static final int EndOfTrack = 105;
  public static final int F = 106;
  public static final int F0 = 107;
  public static final int F1 = 108;
  public static final int F2 = 109;
  public static final int F3 = 110;
  public static final int F4 = 111;
  public static final int F5 = 112;
  public static final int F6 = 113;
  public static final int F7 = 114;
  public static final int F8 = 115;
  public static final int F9 = 116;
  public static final int FNeg1 = 117;
  public static final int FSharp = 118;
  public static final int FSharp0 = 119;
  public static final int FSharp1 = 120;
  public static final int FSharp2 = 121;
  public static final int FSharp3 = 122;
  public static final int FSharp4 = 123;
  public static final int FSharp5 = 124;
  public static final int FSharp6 = 125;
  public static final int FSharp7 = 126;
  public static final int FSharp8 = 127;
  public static final int FSharp9 = 128;
  public static final int FSharpNeg1 = 129;
  public static final int File = 130;
  public static final int G = 131;
  public static final int G0 = 132;
  public static final int G1 = 133;
  public static final int G2 = 134;
  public static final int G3 = 135;
  public static final int G4 = 136;
  public static final int G5 = 137;
  public static final int G6 = 138;
  public static final int G7 = 139;
  public static final int G8 = 140;
  public static final int G9 = 141;
  public static final int GNeg1 = 142;
  public static final int GSharp = 143;
  public static final int GSharp0 = 144;
  public static final int GSharp1 = 145;
  public static final int GSharp2 = 146;
  public static final int GSharp3 = 147;
  public static final int GSharp4 = 148;
  public static final int GSharp5 = 149;
  public static final int GSharp6 = 150;
  public static final int GSharp7 = 151;
  public static final int GSharp8 = 152;
  public static final int GSharpNeg1 = 153;
  public static final int Header = 154;
  public static final int InstrumentName = 155;
  public static final int KeyCode = 156;
  public static final int KeySignature = 157;
  public static final int Keyable = 158;
  public static final int LyricText = 159;
  public static final int MarkerText = 160;
  public static final int MetaEvent = 161;
  public static final int MidiChannelPrefixAssignment = 162;
  public static final int MidiEvent = 163;
  public static final int Note = 164;
  public static final int NoteOff = 165;
  public static final int NoteOn = 166;
  public static final int PitchWheelChange = 167;
  public static final int PolyphonicKeyPressure = 168;
  public static final int Pressurable = 169;
  public static final int ProgramChange = 170;
  public static final int SequenceNumber = 171;
  public static final int SequenceOrTrackName = 172;
  public static final int SequencerSpecificEvent = 173;
  public static final int SetTempo = 174;
  public static final int SmpteOffset = 175;
  public static final int SysexEvent = 176;
  public static final int TextEvent = 177;
  public static final int TicksPerQuarterNote = 178;
  public static final int TimeSignature = 179;
  public static final int Timecode = 180;
  public static final int Track = 181;
  public static final int TrackDivision = 182;
  public static final int TrackEvent = 183;
  public static final int VelocityValue = 184;
  public static final int Velocityable = 185;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L);
    builder.put(0x7c255ef7568abff8L, A);
    builder.put(0x7c255ef7568ac65fL, A0);
    builder.put(0x7c255ef7568ad2ecL, A1);
    builder.put(0x7c255ef7568ad94eL, A2);
    builder.put(0x7c255ef7568adfb0L, A3);
    builder.put(0x7c255ef7568aec39L, A4);
    builder.put(0x7c255ef7568af29bL, A5);
    builder.put(0x7c255ef7568af8fdL, A6);
    builder.put(0x7c255ef7568aff5fL, A7);
    builder.put(0x7c255ef7568b05c1L, A8);
    builder.put(0x7c255ef7568abffdL, ANeg1);
    builder.put(0x7c255ef7568b0c43L, ASharp);
    builder.put(0x7c255ef7568b12aaL, ASharp0);
    builder.put(0x7c255ef7568b190dL, ASharp1);
    builder.put(0x7c255ef7568b1f89L, ASharp2);
    builder.put(0x7c255ef7568b25ebL, ASharp3);
    builder.put(0x7c255ef7568b2c51L, ASharp4);
    builder.put(0x7c255ef7568b38c2L, ASharp5);
    builder.put(0x7c255ef7568b3f24L, ASharp6);
    builder.put(0x7c255ef7568b5dc2L, ASharp7);
    builder.put(0x7c255ef7568b8e7dL, ASharp8);
    builder.put(0x7c255ef7568b0c47L, ASharpNeg1);
    builder.put(0x7c255ef7568b9aeeL, B);
    builder.put(0x7c255ef7568ba158L, B0);
    builder.put(0x7c255ef7568ba7bbL, B1);
    builder.put(0x7c255ef7568bae1eL, B2);
    builder.put(0x7c255ef7568bbaa8L, B3);
    builder.put(0x7c255ef7568bc731L, B4);
    builder.put(0x7c255ef7568bcd94L, B5);
    builder.put(0x7c255ef7568bd3f6L, B6);
    builder.put(0x7c255ef7568becaeL, B7);
    builder.put(0x7c255ef7568c2378L, B8);
    builder.put(0x7c255ef7568b9af4L, BNeg1);
    builder.put(0x7c255ef756a5bae8L, ByteSized);
    builder.put(0x7c255ef7568450ffL, C);
    builder.put(0x7c255ef756843e23L, C0);
    builder.put(0x7c255ef7568450feL, C1);
    builder.put(0x7c255ef7568499eaL, C2);
    builder.put(0x7c255ef75684a677L, C3);
    builder.put(0x7c255ef75684acdeL, C4);
    builder.put(0x7c255ef75684b954L, C5);
    builder.put(0x7c255ef75684d24fL, C6);
    builder.put(0x7c255ef75684ded7L, C7);
    builder.put(0x7c255ef75684e53fL, C8);
    builder.put(0x7c255ef75684eba5L, C9);
    builder.put(0x7c255ef756842bb6L, CNeg1);
    builder.put(0x7c255ef75686b27aL, CSharp);
    builder.put(0x7c255ef75686b8e5L, CSharp0);
    builder.put(0x7c255ef75686bf4bL, CSharp1);
    builder.put(0x7c255ef75686cbc1L, CSharp2);
    builder.put(0x7c255ef7568702a8L, CSharp3);
    builder.put(0x7c255ef756870923L, CSharp4);
    builder.put(0x7c255ef756870f89L, CSharp5);
    builder.put(0x7c255ef756871c36L, CSharp6);
    builder.put(0x7c255ef7568728beL, CSharp7);
    builder.put(0x7c255ef756874760L, CSharp8);
    builder.put(0x7c255ef7568753d5L, CSharp9);
    builder.put(0x7c255ef75686b27fL, CSharpNeg1);
    builder.put(0x7c255ef7567ae9c4L, ChannelMode);
    builder.put(0x7c255ef7567ae9b2L, ChannelPressure);
    builder.put(0x7c255ef7567a5586L, Chunk);
    builder.put(0x7c255ef7567ae987L, ControlChange);
    builder.put(0x7c255ef7567ae996L, Controller);
    builder.put(0x7c255ef7567ae99dL, ControllerValuable);
    builder.put(0x7c255ef7567ae99eL, ControllerValue);
    builder.put(0x7c255ef7567ae995L, Controllerable);
    builder.put(0x7c255ef756e1609bL, CopyrightNotice);
    builder.put(0x7c255ef756e29a28L, CuePoint);
    builder.put(0x7c255ef75687604aL, D);
    builder.put(0x7c255ef7568766b4L, D0);
    builder.put(0x7c255ef756876d1bL, D1);
    builder.put(0x7c255ef756877382L, D2);
    builder.put(0x7c255ef756878009L, D3);
    builder.put(0x7c255ef756878671L, D4);
    builder.put(0x7c255ef75687990dL, D5);
    builder.put(0x7c255ef756879f8bL, D6);
    builder.put(0x7c255ef75687ac12L, D7);
    builder.put(0x7c255ef75687bea8L, D8);
    builder.put(0x7c255ef75687c50aL, D9);
    builder.put(0x7c255ef75687604eL, DNeg1);
    builder.put(0x7c255ef75687d17fL, DSharp);
    builder.put(0x7c255ef75687ddf9L, DSharp0);
    builder.put(0x7c255ef75687e45fL, DSharp1);
    builder.put(0x7c255ef75687eaddL, DSharp2);
    builder.put(0x7c255ef75687f143L, DSharp3);
    builder.put(0x7c255ef75687f7a6L, DSharp4);
    builder.put(0x7c255ef75687fe38L, DSharp5);
    builder.put(0x7c255ef7568810d0L, DSharp6);
    builder.put(0x7c255ef756881733L, DSharp7);
    builder.put(0x7c255ef756881d95L, DSharp8);
    builder.put(0x7c255ef756882a0eL, DSharp9);
    builder.put(0x7c255ef75687d184L, DSharpNeg1);
    builder.put(0x7c255ef75688367fL, E);
    builder.put(0x7c255ef756883ce7L, E0);
    builder.put(0x7c255ef756884958L, E1);
    builder.put(0x7c255ef756884fbaL, E2);
    builder.put(0x7c255ef75688561cL, E3);
    builder.put(0x7c255ef75688628eL, E4);
    builder.put(0x7c255ef756887526L, E5);
    builder.put(0x7c255ef756887b88L, E6);
    builder.put(0x7c255ef75688880fL, E7);
    builder.put(0x7c255ef756889480L, E8);
    builder.put(0x7c255ef75688a0f1L, E9);
    builder.put(0x7c255ef756883684L, ENeg1);
    builder.put(0x7c255ef7567cf8faL, EmptyTrackEvent);
    builder.put(0x7c255ef756e30ce1L, EndOfTrack);
    builder.put(0x7c255ef75688b379L, F);
    builder.put(0x7c255ef75688b9e0L, F0);
    builder.put(0x7c255ef75688cc60L, F1);
    builder.put(0x7c255ef75688d8daL, F2);
    builder.put(0x7c255ef75688df3cL, F3);
    builder.put(0x7c255ef75688e59eL, F4);
    builder.put(0x7c255ef75688ec19L, F5);
    builder.put(0x7c255ef75688fe9aL, F6);
    builder.put(0x7c255ef7568904fcL, F7);
    builder.put(0x7c255ef756890b5eL, F8);
    builder.put(0x7c255ef7568911c0L, F9);
    builder.put(0x7c255ef75688b37eL, FNeg1);
    builder.put(0x7c255ef756891e49L, FSharp);
    builder.put(0x7c255ef7568930efL, FSharp0);
    builder.put(0x7c255ef756893751L, FSharp1);
    builder.put(0x7c255ef756893db3L, FSharp2);
    builder.put(0x7c255ef756896e6dL, FSharp3);
    builder.put(0x7c255ef7568974ecL, FSharp4);
    builder.put(0x7c255ef756897b53L, FSharp5);
    builder.put(0x7c255ef7568981cdL, FSharp6);
    builder.put(0x7c255ef756898847L, FSharp7);
    builder.put(0x7c255ef7568994b8L, FSharp8);
    builder.put(0x7c255ef75689a738L, FSharp9);
    builder.put(0x7c255ef756891e4eL, FSharpNeg1);
    builder.put(0x7c255ef75678a53cL, File);
    builder.put(0x7c255ef75689b3c1L, G);
    builder.put(0x7c255ef75689ba27L, G0);
    builder.put(0x7c255ef75689c08aL, G1);
    builder.put(0x7c255ef75689d960L, G2);
    builder.put(0x7c255ef75689ebe0L, G3);
    builder.put(0x7c255ef75689f242L, G4);
    builder.put(0x7c255ef7568a0b01L, G5);
    builder.put(0x7c255ef7568a1d9dL, G6);
    builder.put(0x7c255ef7568a23ffL, G7);
    builder.put(0x7c255ef7568a3070L, G8);
    builder.put(0x7c255ef7568a3ce9L, G9);
    builder.put(0x7c255ef75689b3c5L, GNeg1);
    builder.put(0x7c255ef7568a4962L, GSharp);
    builder.put(0x7c255ef7568a55d8L, GSharp0);
    builder.put(0x7c255ef7568a5c3aL, GSharp1);
    builder.put(0x7c255ef7568a629dL, GSharp2);
    builder.put(0x7c255ef7568a6f0eL, GSharp3);
    builder.put(0x7c255ef7568a7570L, GSharp4);
    builder.put(0x7c255ef7568a8809L, GSharp5);
    builder.put(0x7c255ef7568a947bL, GSharp6);
    builder.put(0x7c255ef7568aa0edL, GSharp7);
    builder.put(0x7c255ef7568aad5fL, GSharp8);
    builder.put(0x7c255ef7568a4967L, GSharpNeg1);
    builder.put(0x7c255ef75678a53dL, Header);
    builder.put(0x7c255ef756e1f0fbL, InstrumentName);
    builder.put(0x7c255ef7567ae959L, KeyCode);
    builder.put(0x7c255ef756e3fef2L, KeySignature);
    builder.put(0x7c255ef7567ae958L, Keyable);
    builder.put(0x7c255ef756e22a4bL, LyricText);
    builder.put(0x7c255ef756e25da1L, MarkerText);
    builder.put(0x7c255ef7567ae942L, MetaEvent);
    builder.put(0x7c255ef756e2d382L, MidiChannelPrefixAssignment);
    builder.put(0x7c255ef7567ae931L, MidiEvent);
    builder.put(0x7c255ef756842bb2L, Note);
    builder.put(0x7c255ef7567ae94eL, NoteOff);
    builder.put(0x7c255ef7567ae96fL, NoteOn);
    builder.put(0x7c255ef7567ae9bbL, PitchWheelChange);
    builder.put(0x7c255ef7567ae974L, PolyphonicKeyPressure);
    builder.put(0x7c255ef7567ae9acL, Pressurable);
    builder.put(0x7c255ef7567ae9a7L, ProgramChange);
    builder.put(0x7c255ef756dd9414L, SequenceNumber);
    builder.put(0x7c255ef756e198e1L, SequenceOrTrackName);
    builder.put(0x7c255ef756e43857L, SequencerSpecificEvent);
    builder.put(0x7c255ef756e34c5dL, SetTempo);
    builder.put(0x7c255ef756e38587L, SmpteOffset);
    builder.put(0x7c255ef7567ae93bL, SysexEvent);
    builder.put(0x7c255ef756e108afL, TextEvent);
    builder.put(0x7c255ef75678a56bL, TicksPerQuarterNote);
    builder.put(0x7c255ef756e3c574L, TimeSignature);
    builder.put(0x7c255ef75678a573L, Timecode);
    builder.put(0x7c255ef75678a53fL, Track);
    builder.put(0x7c255ef75678a567L, TrackDivision);
    builder.put(0x7c255ef7567ae92aL, TrackEvent);
    builder.put(0x7c255ef7567ae964L, VelocityValue);
    builder.put(0x7c255ef7567ae963L, Velocityable);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
