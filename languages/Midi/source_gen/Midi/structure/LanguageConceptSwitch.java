package Midi.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ByteSized = 0;
  public static final int ChannelMode = 1;
  public static final int ChannelPressure = 2;
  public static final int Chunk = 3;
  public static final int ControlChange = 4;
  public static final int Controller = 5;
  public static final int ControllerValuable = 6;
  public static final int ControllerValue = 7;
  public static final int Controllerable = 8;
  public static final int CopyrightNotice = 9;
  public static final int CuePoint = 10;
  public static final int EmptyTrackEvent = 11;
  public static final int EndOfTrack = 12;
  public static final int File = 13;
  public static final int Header = 14;
  public static final int InstrumentName = 15;
  public static final int KeyCode = 16;
  public static final int KeySignature = 17;
  public static final int Keyable = 18;
  public static final int LyricText = 19;
  public static final int MarkerText = 20;
  public static final int MetaEvent = 21;
  public static final int MidiChannelPrefixAssignment = 22;
  public static final int MidiEvent = 23;
  public static final int Note = 24;
  public static final int NoteOff = 25;
  public static final int NoteOn = 26;
  public static final int PitchWheelChange = 27;
  public static final int PolyphonicKeyPressure = 28;
  public static final int Pressurable = 29;
  public static final int ProgramChange = 30;
  public static final int SequenceNumber = 31;
  public static final int SequenceOrTrackName = 32;
  public static final int SequencerSpecificEvent = 33;
  public static final int SetTempo = 34;
  public static final int SmpteOffset = 35;
  public static final int SysexEvent = 36;
  public static final int TextEvent = 37;
  public static final int TicksPerQuarterNote = 38;
  public static final int TimeSignature = 39;
  public static final int Timecode = 40;
  public static final int Track = 41;
  public static final int TrackDivision = 42;
  public static final int TrackEvent = 43;
  public static final int VelocityValue = 44;
  public static final int Velocityable = 45;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L);
    builder.put(0x7c255ef756a5bae8L, ByteSized);
    builder.put(0x7c255ef7567ae9c4L, ChannelMode);
    builder.put(0x7c255ef7567ae9b2L, ChannelPressure);
    builder.put(0x7c255ef7567a5586L, Chunk);
    builder.put(0x7c255ef7567ae987L, ControlChange);
    builder.put(0x7c255ef7567ae996L, Controller);
    builder.put(0x7c255ef7567ae99dL, ControllerValuable);
    builder.put(0x7c255ef7567ae99eL, ControllerValue);
    builder.put(0x7c255ef7567ae995L, Controllerable);
    builder.put(0x7c255ef756e1609bL, CopyrightNotice);
    builder.put(0x7c255ef756e29a28L, CuePoint);
    builder.put(0x7c255ef7567cf8faL, EmptyTrackEvent);
    builder.put(0x7c255ef756e30ce1L, EndOfTrack);
    builder.put(0x7c255ef75678a53cL, File);
    builder.put(0x7c255ef75678a53dL, Header);
    builder.put(0x7c255ef756e1f0fbL, InstrumentName);
    builder.put(0x7c255ef7567ae959L, KeyCode);
    builder.put(0x7c255ef756e3fef2L, KeySignature);
    builder.put(0x7c255ef7567ae958L, Keyable);
    builder.put(0x7c255ef756e22a4bL, LyricText);
    builder.put(0x7c255ef756e25da1L, MarkerText);
    builder.put(0x7c255ef7567ae942L, MetaEvent);
    builder.put(0x7c255ef756e2d382L, MidiChannelPrefixAssignment);
    builder.put(0x7c255ef7567ae931L, MidiEvent);
    builder.put(0x7c255ef756842bb2L, Note);
    builder.put(0x7c255ef7567ae94eL, NoteOff);
    builder.put(0x7c255ef7567ae96fL, NoteOn);
    builder.put(0x7c255ef7567ae9bbL, PitchWheelChange);
    builder.put(0x7c255ef7567ae974L, PolyphonicKeyPressure);
    builder.put(0x7c255ef7567ae9acL, Pressurable);
    builder.put(0x7c255ef7567ae9a7L, ProgramChange);
    builder.put(0x7c255ef756dd9414L, SequenceNumber);
    builder.put(0x7c255ef756e198e1L, SequenceOrTrackName);
    builder.put(0x7c255ef756e43857L, SequencerSpecificEvent);
    builder.put(0x7c255ef756e34c5dL, SetTempo);
    builder.put(0x7c255ef756e38587L, SmpteOffset);
    builder.put(0x7c255ef7567ae93bL, SysexEvent);
    builder.put(0x7c255ef756e108afL, TextEvent);
    builder.put(0x7c255ef75678a56bL, TicksPerQuarterNote);
    builder.put(0x7c255ef756e3c574L, TimeSignature);
    builder.put(0x7c255ef75678a573L, Timecode);
    builder.put(0x7c255ef75678a53fL, Track);
    builder.put(0x7c255ef75678a567L, TrackDivision);
    builder.put(0x7c255ef7567ae92aL, TrackEvent);
    builder.put(0x7c255ef7567ae964L, VelocityValue);
    builder.put(0x7c255ef7567ae963L, Velocityable);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
