package Midi.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptByte = createDescriptorForByte();
  /*package*/ final ConceptDescriptor myConceptByteSized = createDescriptorForByteSized();
  /*package*/ final ConceptDescriptor myConceptChannelMode = createDescriptorForChannelMode();
  /*package*/ final ConceptDescriptor myConceptChannelPressure = createDescriptorForChannelPressure();
  /*package*/ final ConceptDescriptor myConceptChunk = createDescriptorForChunk();
  /*package*/ final ConceptDescriptor myConceptControlChange = createDescriptorForControlChange();
  /*package*/ final ConceptDescriptor myConceptController = createDescriptorForController();
  /*package*/ final ConceptDescriptor myConceptControllerValuable = createDescriptorForControllerValuable();
  /*package*/ final ConceptDescriptor myConceptControllerValue = createDescriptorForControllerValue();
  /*package*/ final ConceptDescriptor myConceptControllerable = createDescriptorForControllerable();
  /*package*/ final ConceptDescriptor myConceptCopyrightNotice = createDescriptorForCopyrightNotice();
  /*package*/ final ConceptDescriptor myConceptCuePoint = createDescriptorForCuePoint();
  /*package*/ final ConceptDescriptor myConceptEmptyTrackEvent = createDescriptorForEmptyTrackEvent();
  /*package*/ final ConceptDescriptor myConceptEndOfTrack = createDescriptorForEndOfTrack();
  /*package*/ final ConceptDescriptor myConceptFile = createDescriptorForFile();
  /*package*/ final ConceptDescriptor myConceptHeader = createDescriptorForHeader();
  /*package*/ final ConceptDescriptor myConceptInstrumentName = createDescriptorForInstrumentName();
  /*package*/ final ConceptDescriptor myConceptKeyCode = createDescriptorForKeyCode();
  /*package*/ final ConceptDescriptor myConceptKeySignature = createDescriptorForKeySignature();
  /*package*/ final ConceptDescriptor myConceptKeyable = createDescriptorForKeyable();
  /*package*/ final ConceptDescriptor myConceptLyricText = createDescriptorForLyricText();
  /*package*/ final ConceptDescriptor myConceptMarker = createDescriptorForMarker();
  /*package*/ final ConceptDescriptor myConceptMetaEvent = createDescriptorForMetaEvent();
  /*package*/ final ConceptDescriptor myConceptMidiChannelPrefixAssignment = createDescriptorForMidiChannelPrefixAssignment();
  /*package*/ final ConceptDescriptor myConceptMidiEvent = createDescriptorForMidiEvent();
  /*package*/ final ConceptDescriptor myConceptNote = createDescriptorForNote();
  /*package*/ final ConceptDescriptor myConceptNoteOff = createDescriptorForNoteOff();
  /*package*/ final ConceptDescriptor myConceptNoteOn = createDescriptorForNoteOn();
  /*package*/ final ConceptDescriptor myConceptPitchWheelChange = createDescriptorForPitchWheelChange();
  /*package*/ final ConceptDescriptor myConceptPolyphonicKeyPressure = createDescriptorForPolyphonicKeyPressure();
  /*package*/ final ConceptDescriptor myConceptPressurable = createDescriptorForPressurable();
  /*package*/ final ConceptDescriptor myConceptPressure = createDescriptorForPressure();
  /*package*/ final ConceptDescriptor myConceptProgramChange = createDescriptorForProgramChange();
  /*package*/ final ConceptDescriptor myConceptSequenceNumber = createDescriptorForSequenceNumber();
  /*package*/ final ConceptDescriptor myConceptSequenceOrTrackName = createDescriptorForSequenceOrTrackName();
  /*package*/ final ConceptDescriptor myConceptSequencerSpecificEvent = createDescriptorForSequencerSpecificEvent();
  /*package*/ final ConceptDescriptor myConceptSetTempo = createDescriptorForSetTempo();
  /*package*/ final ConceptDescriptor myConceptSmpteOffset = createDescriptorForSmpteOffset();
  /*package*/ final ConceptDescriptor myConceptSysexEvent = createDescriptorForSysexEvent();
  /*package*/ final ConceptDescriptor myConceptSystemCommonMessage = createDescriptorForSystemCommonMessage();
  /*package*/ final ConceptDescriptor myConceptSystemExclusiveMessage = createDescriptorForSystemExclusiveMessage();
  /*package*/ final ConceptDescriptor myConceptTextEvent = createDescriptorForTextEvent();
  /*package*/ final ConceptDescriptor myConceptTicksPerQuarterNote = createDescriptorForTicksPerQuarterNote();
  /*package*/ final ConceptDescriptor myConceptTimeSignature = createDescriptorForTimeSignature();
  /*package*/ final ConceptDescriptor myConceptTimecode = createDescriptorForTimecode();
  /*package*/ final ConceptDescriptor myConceptTrack = createDescriptorForTrack();
  /*package*/ final ConceptDescriptor myConceptTrackDivision = createDescriptorForTrackDivision();
  /*package*/ final ConceptDescriptor myConceptTrackEvent = createDescriptorForTrackEvent();
  /*package*/ final ConceptDescriptor myConceptVelocityValue = createDescriptorForVelocityValue();
  /*package*/ final ConceptDescriptor myConceptVelocityable = createDescriptorForVelocityable();
  /*package*/ final EnumerationDescriptor myEnumerationChannelModeOptions = new EnumerationDescriptor_ChannelModeOptions();
  /*package*/ final EnumerationDescriptor myEnumerationChunkFormat = new EnumerationDescriptor_ChunkFormat();
  /*package*/ final EnumerationDescriptor myEnumerationKeyMajorMinor = new EnumerationDescriptor_KeyMajorMinor();
  /*package*/ final EnumerationDescriptor myEnumerationKeySharpFlats = new EnumerationDescriptor_KeySharpFlats();
  /*package*/ final EnumerationDescriptor myEnumerationTimecodeRate = new EnumerationDescriptor_TimecodeRate();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x87d1018d30c44219L, 0x852f1bd942b093e8L, "MusicTheoryLang");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptByte, myConceptByteSized, myConceptChannelMode, myConceptChannelPressure, myConceptChunk, myConceptControlChange, myConceptController, myConceptControllerValuable, myConceptControllerValue, myConceptControllerable, myConceptCopyrightNotice, myConceptCuePoint, myConceptEmptyTrackEvent, myConceptEndOfTrack, myConceptFile, myConceptHeader, myConceptInstrumentName, myConceptKeyCode, myConceptKeySignature, myConceptKeyable, myConceptLyricText, myConceptMarker, myConceptMetaEvent, myConceptMidiChannelPrefixAssignment, myConceptMidiEvent, myConceptNote, myConceptNoteOff, myConceptNoteOn, myConceptPitchWheelChange, myConceptPolyphonicKeyPressure, myConceptPressurable, myConceptPressure, myConceptProgramChange, myConceptSequenceNumber, myConceptSequenceOrTrackName, myConceptSequencerSpecificEvent, myConceptSetTempo, myConceptSmpteOffset, myConceptSysexEvent, myConceptSystemCommonMessage, myConceptSystemExclusiveMessage, myConceptTextEvent, myConceptTicksPerQuarterNote, myConceptTimeSignature, myConceptTimecode, myConceptTrack, myConceptTrackDivision, myConceptTrackEvent, myConceptVelocityValue, myConceptVelocityable);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Byte:
        return myConceptByte;
      case LanguageConceptSwitch.ByteSized:
        return myConceptByteSized;
      case LanguageConceptSwitch.ChannelMode:
        return myConceptChannelMode;
      case LanguageConceptSwitch.ChannelPressure:
        return myConceptChannelPressure;
      case LanguageConceptSwitch.Chunk:
        return myConceptChunk;
      case LanguageConceptSwitch.ControlChange:
        return myConceptControlChange;
      case LanguageConceptSwitch.Controller:
        return myConceptController;
      case LanguageConceptSwitch.ControllerValuable:
        return myConceptControllerValuable;
      case LanguageConceptSwitch.ControllerValue:
        return myConceptControllerValue;
      case LanguageConceptSwitch.Controllerable:
        return myConceptControllerable;
      case LanguageConceptSwitch.CopyrightNotice:
        return myConceptCopyrightNotice;
      case LanguageConceptSwitch.CuePoint:
        return myConceptCuePoint;
      case LanguageConceptSwitch.EmptyTrackEvent:
        return myConceptEmptyTrackEvent;
      case LanguageConceptSwitch.EndOfTrack:
        return myConceptEndOfTrack;
      case LanguageConceptSwitch.File:
        return myConceptFile;
      case LanguageConceptSwitch.Header:
        return myConceptHeader;
      case LanguageConceptSwitch.InstrumentName:
        return myConceptInstrumentName;
      case LanguageConceptSwitch.KeyCode:
        return myConceptKeyCode;
      case LanguageConceptSwitch.KeySignature:
        return myConceptKeySignature;
      case LanguageConceptSwitch.Keyable:
        return myConceptKeyable;
      case LanguageConceptSwitch.LyricText:
        return myConceptLyricText;
      case LanguageConceptSwitch.Marker:
        return myConceptMarker;
      case LanguageConceptSwitch.MetaEvent:
        return myConceptMetaEvent;
      case LanguageConceptSwitch.MidiChannelPrefixAssignment:
        return myConceptMidiChannelPrefixAssignment;
      case LanguageConceptSwitch.MidiEvent:
        return myConceptMidiEvent;
      case LanguageConceptSwitch.Note:
        return myConceptNote;
      case LanguageConceptSwitch.NoteOff:
        return myConceptNoteOff;
      case LanguageConceptSwitch.NoteOn:
        return myConceptNoteOn;
      case LanguageConceptSwitch.PitchWheelChange:
        return myConceptPitchWheelChange;
      case LanguageConceptSwitch.PolyphonicKeyPressure:
        return myConceptPolyphonicKeyPressure;
      case LanguageConceptSwitch.Pressurable:
        return myConceptPressurable;
      case LanguageConceptSwitch.Pressure:
        return myConceptPressure;
      case LanguageConceptSwitch.ProgramChange:
        return myConceptProgramChange;
      case LanguageConceptSwitch.SequenceNumber:
        return myConceptSequenceNumber;
      case LanguageConceptSwitch.SequenceOrTrackName:
        return myConceptSequenceOrTrackName;
      case LanguageConceptSwitch.SequencerSpecificEvent:
        return myConceptSequencerSpecificEvent;
      case LanguageConceptSwitch.SetTempo:
        return myConceptSetTempo;
      case LanguageConceptSwitch.SmpteOffset:
        return myConceptSmpteOffset;
      case LanguageConceptSwitch.SysexEvent:
        return myConceptSysexEvent;
      case LanguageConceptSwitch.SystemCommonMessage:
        return myConceptSystemCommonMessage;
      case LanguageConceptSwitch.SystemExclusiveMessage:
        return myConceptSystemExclusiveMessage;
      case LanguageConceptSwitch.TextEvent:
        return myConceptTextEvent;
      case LanguageConceptSwitch.TicksPerQuarterNote:
        return myConceptTicksPerQuarterNote;
      case LanguageConceptSwitch.TimeSignature:
        return myConceptTimeSignature;
      case LanguageConceptSwitch.Timecode:
        return myConceptTimecode;
      case LanguageConceptSwitch.Track:
        return myConceptTrack;
      case LanguageConceptSwitch.TrackDivision:
        return myConceptTrackDivision;
      case LanguageConceptSwitch.TrackEvent:
        return myConceptTrackEvent;
      case LanguageConceptSwitch.VelocityValue:
        return myConceptVelocityValue;
      case LanguageConceptSwitch.Velocityable:
        return myConceptVelocityable;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationChannelModeOptions, myEnumerationChunkFormat, myEnumerationKeyMajorMinor, myEnumerationKeySharpFlats, myEnumerationTimecodeRate);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForByte() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Byte", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22f867851L);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756a5bae8L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/7933369822795429969");
    b.version(3);
    b.property("data", 0x6e18fdd22f867853L).type(PrimitiveTypeId.INTEGER).origin("7933369822795429971").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForByteSized() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "ByteSized", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756a5bae8L);
    b.interface_();
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651244993256");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChannelMode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "ChannelMode", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c4L);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187204");
    b.version(3);
    b.property("channel", 0x7c255ef756fe2ffeL).type(PrimitiveTypeId.INTEGER).origin("8945660651250790398").done();
    b.property("mode", 0x7c255ef7567ae9f1L).type(MetaIdFactory.dataTypeId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L)).origin("8945660651242187249").done();
    b.property("number_of_channels", 0x7c255ef757030832L).type(PrimitiveTypeId.INTEGER).origin("8945660651251107890").done();
    b.alias("channel_mode");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChannelPressure() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "ChannelPressure", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9b2L);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187186");
    b.version(3);
    b.property("channel", 0x7c255ef756fc6edbL).type(PrimitiveTypeId.INTEGER).origin("8945660651250675419").done();
    b.aggregate("pressure", 0x7c255ef7567ae9b7L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9acL).optional(false).ordered(true).multiple(false).origin("8945660651242187191").done();
    b.alias("channel_pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChunk() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Chunk", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567a5586L);
    b.class_(false, true, false);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242149254");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForControlChange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "ControlChange", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae987L);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187143");
    b.version(3);
    b.property("channel", 0x7c255ef756fac245L).type(PrimitiveTypeId.INTEGER).origin("8945660651250565701").done();
    b.aggregate("controller", 0x7c255ef7567ae988L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae995L).optional(false).ordered(true).multiple(false).origin("8945660651242187144").done();
    b.aggregate("value", 0x7c255ef7567ae989L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae99dL).optional(false).ordered(true).multiple(false).origin("8945660651242187145").done();
    b.alias("control_change");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForController() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Controller", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae996L);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae995L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187158");
    b.version(3);
    b.property("controller_number", 0x7c255ef7567ae99aL).type(PrimitiveTypeId.INTEGER).origin("8945660651242187162").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForControllerValuable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "ControllerValuable", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae99dL);
    b.interface_();
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187165");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForControllerValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "ControllerValue", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae99eL);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae99dL);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187166");
    b.version(3);
    b.property("value", 0x7c255ef7567ae9a2L).type(PrimitiveTypeId.INTEGER).origin("8945660651242187170").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForControllerable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Controllerable", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae995L);
    b.interface_();
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187157");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCopyrightNotice() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "CopyrightNotice", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e1609bL);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248902299");
    b.version(3);
    b.alias("copyright_notice");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCuePoint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "CuePoint", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e29a28L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248982568");
    b.version(3);
    b.alias("cue_point");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyTrackEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "EmptyTrackEvent", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567cf8faL);
    b.class_(false, false, false);
    // extends: Midi.structure.TrackEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242322170");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEndOfTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "EndOfTrack", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e30ce1L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651249011937");
    b.version(3);
    b.alias("end_of_track");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "File", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756a5bae8L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242038588");
    b.version(3);
    b.aggregate("header", 0x7c255ef75678a540L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53dL).optional(false).ordered(true).multiple(false).origin("8945660651242038592").done();
    b.aggregate("tracks", 0x7c255ef75678a542L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53fL).optional(true).ordered(true).multiple(true).origin("8945660651242038594").done();
    b.alias("file");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHeader() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Header", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53dL);
    b.class_(false, false, false);
    // extends: Midi.structure.Chunk
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567a5586L);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756a5bae8L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242038589");
    b.version(3);
    b.property("format", 0x7c255ef75678a559L).type(MetaIdFactory.dataTypeId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a548L)).origin("8945660651242038617").done();
    b.aggregate("division", 0x7c255ef756792641L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a567L).optional(false).ordered(true).multiple(false).origin("8945660651242071617").done();
    b.alias("header");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstrumentName() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "InstrumentName", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e1f0fbL);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248939259");
    b.version(3);
    b.alias("instrument_name");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForKeyCode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "KeyCode", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae959L);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae958L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187097");
    b.version(3);
    b.property("note_number", 0x7c255ef7567ae95dL).type(PrimitiveTypeId.INTEGER).origin("8945660651242187101").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForKeySignature() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "KeySignature", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3fef2L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651249073906");
    b.version(3);
    b.property("sf", 0x7c255ef756ebb8e3L).type(MetaIdFactory.dataTypeId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb7e4L)).origin("8945660651249580259").done();
    b.property("mi", 0x7c255ef756ebb8f9L).type(MetaIdFactory.dataTypeId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb890L)).origin("8945660651249580281").done();
    b.alias("key_signature");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForKeyable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Keyable", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae958L);
    b.interface_();
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187096");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLyricText() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "LyricText", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e22a4bL);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248953931");
    b.version(3);
    b.alias("lyric_text");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMarker() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Marker", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e25da1L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248967073");
    b.version(3);
    b.alias("marker");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMetaEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "MetaEvent", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.class_(false, true, false);
    // extends: Midi.structure.TrackEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187074");
    b.version(3);
    b.property("typecode", 0x7c255ef756e05accL).type(PrimitiveTypeId.INTEGER).origin("8945660651248835276").done();
    b.property("data", 0x7c255ef756dff39aL).type(PrimitiveTypeId.STRING).origin("8945660651248808858").done();
    b.alias("meta");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMidiChannelPrefixAssignment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "MidiChannelPrefixAssignment", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e2d382L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248997250");
    b.version(3);
    b.property("channel", 0x7c255ef756e5ecaeL).type(PrimitiveTypeId.INTEGER).origin("8945660651249200302").done();
    b.alias("midi_channel_prefix_assignment");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMidiEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "MidiEvent", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.class_(false, true, false);
    // extends: Midi.structure.TrackEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187057");
    b.version(3);
    b.alias("midi");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Note", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756842bb2L);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae958L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242793906");
    b.version(3);
    b.aggregate("note", 0x7c255ef758235f7aL).target(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL).optional(false).ordered(true).multiple(false).origin("8945660651270004602").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNoteOff() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "NoteOff", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187086");
    b.version(3);
    b.property("channel", 0x7c255ef756f4bfd5L).type(PrimitiveTypeId.INTEGER).origin("8945660651250171861").done();
    b.aggregate("key", 0x7c255ef7567ae961L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae958L).optional(false).ordered(true).multiple(false).origin("8945660651242187105").done();
    b.aggregate("velocity", 0x7c255ef7567ae968L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae963L).optional(false).ordered(true).multiple(false).origin("8945660651242187112").done();
    b.alias("note_off");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNoteOn() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "NoteOn", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187119");
    b.version(3);
    b.property("channel", 0x7c255ef756f94688L).type(PrimitiveTypeId.INTEGER).origin("8945660651250468488").done();
    b.aggregate("key", 0x7c255ef7567ae970L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae958L).optional(false).ordered(true).multiple(false).origin("8945660651242187120").done();
    b.aggregate("velocity", 0x7c255ef7567ae971L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae963L).optional(false).ordered(true).multiple(false).origin("8945660651242187121").done();
    b.alias("note_on");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPitchWheelChange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "PitchWheelChange", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9bbL);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187195");
    b.version(3);
    b.property("channel", 0x7c255ef756fd4046L).type(PrimitiveTypeId.INTEGER).origin("8945660651250729030").done();
    b.property("least_sig", 0x7c255ef7567ae9beL).type(PrimitiveTypeId.INTEGER).origin("8945660651242187198").done();
    b.property("most_sig", 0x7c255ef7567ae9c0L).type(PrimitiveTypeId.INTEGER).origin("8945660651242187200").done();
    b.alias("pitch_wheel_change");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPolyphonicKeyPressure() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "PolyphonicKeyPressure", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae974L);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187124");
    b.version(3);
    b.property("channel", 0x7c255ef756f99103L).type(PrimitiveTypeId.INTEGER).origin("8945660651250487555").done();
    b.aggregate("key", 0x7c255ef7567ae975L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae958L).optional(false).ordered(true).multiple(false).origin("8945660651242187125").done();
    b.aggregate("pressure", 0x7c255ef7567ae976L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9acL).optional(false).ordered(true).multiple(false).origin("8945660651242187126").done();
    b.alias("poly_pressure");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPressurable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Pressurable", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9acL);
    b.interface_();
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187180");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPressure() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Pressure", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fafdf79L);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9acL);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/7933369822798143353");
    b.version(3);
    b.property("pressure", 0x6e18fdd22fafdf9eL).type(PrimitiveTypeId.INTEGER).origin("7933369822798143390").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProgramChange() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "ProgramChange", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9a7L);
    b.class_(false, false, false);
    // extends: Midi.structure.MidiEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae931L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187175");
    b.version(3);
    b.property("channel", 0x7c255ef756fbf694L).type(PrimitiveTypeId.INTEGER).origin("8945660651250644628").done();
    b.property("program_number", 0x7c255ef7567ae9a9L).type(PrimitiveTypeId.INTEGER).origin("8945660651242187177").done();
    b.alias("program_change");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSequenceNumber() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SequenceNumber", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756dd9414L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248653332");
    b.version(3);
    b.alias("sequence_number");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSequenceOrTrackName() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SequenceOrTrackName", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e198e1L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248916705");
    b.version(3);
    b.alias("name");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSequencerSpecificEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SequencerSpecificEvent", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e43857L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651249088599");
    b.version(3);
    b.aggregate("bytes", 0x6e18fdd22f867856L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22f867851L).optional(true).ordered(true).multiple(true).origin("7933369822795429974").done();
    b.alias("sequencer_specific_event");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSetTempo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SetTempo", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e34c5dL);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651249028189");
    b.version(3);
    b.property("microseconds_per_quarter_note", 0x7c255ef756e75757L).type(PrimitiveTypeId.INTEGER).origin("8945660651249293143").done();
    b.alias("set_tempo");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSmpteOffset() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SmpteOffset", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e38587L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651249042823");
    b.version(3);
    b.property("hour", 0x7c255ef756e953eaL).type(PrimitiveTypeId.INTEGER).origin("8945660651249423338").done();
    b.property("minute", 0x7c255ef756e95400L).type(PrimitiveTypeId.INTEGER).origin("8945660651249423360").done();
    b.property("second", 0x7c255ef756e95418L).type(PrimitiveTypeId.INTEGER).origin("8945660651249423384").done();
    b.property("frame", 0x7c255ef756e95431L).type(PrimitiveTypeId.INTEGER).origin("8945660651249423409").done();
    b.property("fractional_frames", 0x7c255ef756ea5761L).type(PrimitiveTypeId.INTEGER).origin("8945660651249489761").done();
    b.alias("smpte_offset");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSysexEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SysexEvent", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae93bL);
    b.class_(false, true, false);
    // extends: Midi.structure.TrackEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187067");
    b.version(3);
    b.alias("sysex");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSystemCommonMessage() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SystemCommonMessage", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fdafb27L);
    b.class_(false, true, false);
    // extends: Midi.structure.TrackEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/7933369822800968487");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSystemExclusiveMessage() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "SystemExclusiveMessage", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fdafb1eL);
    b.class_(false, false, false);
    // extends: Midi.structure.SystemCommonMessage
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fdafb27L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/7933369822800968478");
    b.version(3);
    b.aggregate("data", 0x6e18fdd22fdafb24L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22f867851L).optional(true).ordered(true).multiple(true).origin("7933369822800968484").done();
    b.alias("system_exclusive_message");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTextEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "TextEvent", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e108afL);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651248879791");
    b.version(3);
    b.alias("text");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTicksPerQuarterNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "TicksPerQuarterNote", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a56bL);
    b.class_(false, false, false);
    // extends: Midi.structure.TrackDivision
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a567L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242038635");
    b.version(3);
    b.property("ticks", 0x7c255ef75678a570L).type(PrimitiveTypeId.INTEGER).origin("8945660651242038640").done();
    b.alias("ticks_per_quarter_note");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTimeSignature() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "TimeSignature", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3c574L);
    b.class_(false, false, false);
    // extends: Midi.structure.MetaEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651249059188");
    b.version(3);
    b.property("numerator", 0x7c255ef756eb2624L).type(PrimitiveTypeId.INTEGER).origin("8945660651249542692").done();
    b.property("denominator", 0x7c255ef756eb2630L).type(PrimitiveTypeId.INTEGER).origin("8945660651249542704").done();
    b.property("midi_clocks_per_metronome_click", 0x7c255ef756eb2647L).type(PrimitiveTypeId.INTEGER).origin("8945660651249542727").done();
    b.property("thirty_second_notes_in_quarter_note", 0x7c255ef756eb2688L).type(PrimitiveTypeId.INTEGER).origin("8945660651249542792").done();
    b.alias("time_signature");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTimecode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Timecode", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a573L);
    b.class_(false, false, false);
    // extends: Midi.structure.TrackDivision
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a567L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242038643");
    b.version(3);
    b.property("rate", 0x7c255ef75678a598L).type(MetaIdFactory.dataTypeId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a576L)).origin("8945660651242038680").done();
    b.property("ticks_per_frame", 0x7c255ef75678a59bL).type(PrimitiveTypeId.INTEGER).origin("8945660651242038683").done();
    b.alias("timecode");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Track", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53fL);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756a5bae8L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242038591");
    b.version(3);
    b.aggregate("events", 0x7c255ef7567ae9f6L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL).optional(true).ordered(true).multiple(true).origin("8945660651242187254").done();
    b.alias("track");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrackDivision() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "TrackDivision", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a567L);
    b.class_(false, true, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756a5bae8L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242038631");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrackEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "TrackEvent", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL);
    b.class_(false, true, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756a5bae8L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187050");
    b.version(3);
    b.property("deltaTime", 0x7c255ef7567ae938L).type(PrimitiveTypeId.INTEGER).origin("8945660651242187064").done();
    b.alias("track_event");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVelocityValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "VelocityValue", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L);
    b.class_(false, false, false);
    b.parent(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae963L);
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187108");
    b.version(3);
    b.property("velocity", 0x7c255ef7567ae96cL).type(PrimitiveTypeId.INTEGER).origin("8945660651242187116").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVelocityable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Midi", "Velocityable", 0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae963L);
    b.interface_();
    b.origin("r:b9dd644d-910d-4c92-935c-1cee59d546f7(Midi.structure)/8945660651242187107");
    b.version(3);
    return b.create();
  }
}
