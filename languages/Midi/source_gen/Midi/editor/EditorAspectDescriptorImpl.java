package Midi.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Byte_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ChannelMode_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ChannelPressure_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ControlChange_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Controller_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ControllerValue_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new EmptyTrackEvent_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new File_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Header_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new KeyCode_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new KeySignature_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Note_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new NoteOff_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new NoteOn_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new PitchWheelChange_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new PolyphonicKeyPressure_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Pressure_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ProgramChange_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new SequenceOrTrackName_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new SetTempo_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new SmpteOffset_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new TicksPerQuarterNote_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new TimeSignature_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new Timecode_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new Track_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new TrackEvent_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new UnknownMetaEvent_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new VelocityValue_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22f867851L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c4L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9b2L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae987L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae996L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae99eL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567cf8faL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53dL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae959L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3fef2L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756842bb2L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9bbL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae974L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fafdf79L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9a7L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e198e1L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e34c5dL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e38587L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a56bL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3c574L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a573L), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53fL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x3e52dc57ee82e95eL), MetaIdFactory.conceptId(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L)).seal();
}
