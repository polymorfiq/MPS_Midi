package Midi.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import MusicTheoryLang.behavior.Pitch__BehaviorDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Note__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756842bb2L, "Midi.structure.Note");

  public static final SMethod<Integer> note_number_id7K_nJtmx2Jg = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("note_number").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651242793936L).languageId(0xaa863ed1bd51d7c6L, 0x35a3fd90d0264551L).build2();
  public static final SMethod<SNode> clone_id7K_nJtoc7OL = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("clone").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651270864177L).languageId(0xaa863ed1bd51d7c6L, 0x35a3fd90d0264551L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(note_number_id7K_nJtmx2Jg, clone_id7K_nJtoc7OL);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static int note_number_id7K_nJtmx2Jg(@NotNull SNode __thisNode__) {
    int note_number;

    int offset = 0;
    switch (enumSwitchIndex.indexNullable(SPropertyOperations.getEnum(SLinkOperations.getTarget(__thisNode__, LINKS.note$Q_5b), PROPS.name$nBvq))) {
      case 0:
        offset = 0;
        break;
      case 1:
        offset = 1;
        break;
      case 2:
        offset = 1;
        break;
      case 3:
        offset = 2;
        break;
      case 4:
        offset = 3;
        break;
      case 5:
        offset = 3;
        break;
      case 6:
        offset = 4;
        break;
      case 7:
        offset = 5;
        break;
      case 8:
        offset = 6;
        break;
      case 9:
        offset = 6;
        break;
      case 10:
        offset = 7;
        break;
      case 11:
        offset = 8;
        break;
      case 12:
        offset = 8;
        break;
      case 13:
        offset = 9;
        break;
      case 14:
        offset = 10;
        break;
      case 15:
        offset = 10;
        break;
      case 16:
        offset = 11;
        break;
    }

    note_number = ((SPropertyOperations.getInteger(SLinkOperations.getTarget(__thisNode__, LINKS.note$Q_5b), PROPS.octave$3IC9) + 1) * 12) + offset;

    return note_number;
  }
  /*package*/ static SNode clone_id7K_nJtoc7OL(@NotNull SNode __thisNode__) {
    SNode cloned = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756842bb2L, "Midi.structure.Note"));
    SLinkOperations.setTarget(cloned, LINKS.note$Q_5b, Pitch__BehaviorDescriptor.closestNote_id7K_nJtodIyB.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.note$Q_5b)));
    return cloned;
  }

  /*package*/ Note__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) note_number_id7K_nJtmx2Jg(node));
      case 1:
        return (T) ((SNode) clone_id7K_nJtoc7OL(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92c0dL, 0x7c255ef757c92c0eL, 0x7c255ef757c92c33L, 0x7c255ef757c92c55L, 0x7c255ef757c92c83L, 0x7c255ef757c92c9dL, 0x7c255ef757c92cc2L, 0x7c255ef757c92cc9L, 0x7c255ef757c92ce6L, 0x7c255ef757c92cefL, 0x7c255ef757c92d23L, 0x7c255ef757c92d4dL, 0x7c255ef757c92d64L, 0x7c255ef757c92d90L, 0x7c255ef757c92da9L, 0x7c255ef757c92dcdL, 0x7c255ef757c92dfcL, 0x7c255ef757c92e17L);

  private static final class LINKS {
    /*package*/ static final SContainmentLink note$Q_5b = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756842bb2L, 0x7c255ef758235f7aL, "note");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$nBvq = MetaAdapterFactory.getProperty(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL, 0x7c255ef757c93052L, "name");
    /*package*/ static final SProperty octave$3IC9 = MetaAdapterFactory.getProperty(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL, 0x7c255ef757c951a3L, "octave");
  }
}
