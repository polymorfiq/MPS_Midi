package Midi.BinaryHelpers;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import java.io.IOException;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class BytesToMidi {

  public static void importData(String sourceFile, String name, SModel targetModel) throws IOException {
    TemporaryModels temporaryModels = TemporaryModels.getInstance();
    SModel tempModel = temporaryModels.createReadOnly(TempModuleOptions.forDefaultModule());
    try {
      importDataIntoModel(sourceFile, name, tempModel);
      mergeModelInto(tempModel, targetModel);
    } finally {
      temporaryModels.dispose(tempModel);
    }
  }

  private static void importDataIntoModel(String sourceFile, String name, SModel targetModel) throws IOException {
    SNode midiFile = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, "Midi.structure.File"));
    SPropertyOperations.assign(midiFile, PROPS.name$MnvL, name);

    SModelOperations.addRootNode(targetModel, midiFile);
  }

  private static void mergeModelInto(SModel sourceModel, SModel targetModel) {
    for (SNode sourceRoot : ListSequence.fromList(SModelOperations.roots(sourceModel, CONCEPTS.File$g))) {
      findOrCreateFile(targetModel, SPropertyOperations.getString(sourceRoot, PROPS.name$MnvL));
    }
  }

  /**
   * Find or create a Location with the given name. If a new node is created, the name is initialized so that the result
   * of this method will always have the proper name set.
   */
  private static SNode findOrCreateFile(SModel model, final String name) {
    SNode existing = ListSequence.fromList(SModelOperations.roots(model, CONCEPTS.File$g)).findFirst((it) -> Objects.equals(SPropertyOperations.getString(it, PROPS.name$MnvL), name));
    if (existing == null) {
      existing = SModelOperations.createNewRootNode(model, MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, "Midi.structure.File"));
      SPropertyOperations.assign(existing, PROPS.name$MnvL, name);
    }
    return existing;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept File$g = MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, "Midi.structure.File");
  }
}
