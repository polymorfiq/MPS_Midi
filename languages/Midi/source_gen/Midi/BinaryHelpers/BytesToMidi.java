package Midi.BinaryHelpers;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Objects;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import java.util.LinkedList;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class BytesToMidi {

  public static void importData(String sourceFile, String name, SModel targetModel) throws Exception {
    TemporaryModels temporaryModels = TemporaryModels.getInstance();
    SModel tempModel = temporaryModels.createReadOnly(TempModuleOptions.forDefaultModule());
    try {
      importDataIntoModel(sourceFile, name, tempModel);
      mergeModelInto(tempModel, targetModel);
    } finally {
      temporaryModels.dispose(tempModel);
    }
  }

  private static void importDataIntoModel(String sourceFile, String name, SModel targetModel) throws Exception {
    SNode midiFile = SModelOperations.createNewRootNode(targetModel, MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, "Midi.structure.File"));

    SPropertyOperations.assign(midiFile, PROPS.name$MnvL, name);
    SLinkOperations.setTarget(midiFile, LINKS.header$JJZj, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53dL, "Midi.structure.Header")));

    InputStream in = Files.newInputStream(Path.of(sourceFile));
    addToMidiFile(in, midiFile);

    SModelOperations.addRootNode(targetModel, midiFile);
  }

  private static void mergeModelInto(SModel sourceModel, SModel targetModel) {
    for (SNode sourceRoot : ListSequence.fromList(SModelOperations.roots(sourceModel, CONCEPTS.File$g))) {
      findOrCreateFile(targetModel, sourceRoot);
    }
  }

  private static SNode findOrCreateFile(SModel model, final SNode newFile) {
    SNode existing = ListSequence.fromList(SModelOperations.roots(model, CONCEPTS.File$g)).findFirst((it) -> Objects.equals(SPropertyOperations.getString(it, PROPS.name$MnvL), SPropertyOperations.getString(newFile, PROPS.name$MnvL)));
    if (existing == null) {
      existing = SModelOperations.createNewRootNode(model, MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, "Midi.structure.File"));
      SPropertyOperations.assign(existing, PROPS.name$MnvL, SPropertyOperations.getString(newFile, PROPS.name$MnvL));
      SLinkOperations.setTarget(existing, LINKS.header$JJZj, SLinkOperations.getTarget(newFile, LINKS.header$JJZj));
      SLinkOperations.getChildren(existing, LINKS.tracks$JKtl).removeIf((track) -> SLinkOperations.getChildren(newFile, LINKS.tracks$JKtl).contains(track));
      ListSequence.fromList(SLinkOperations.getChildren(existing, LINKS.tracks$JKtl)).addSequence(ListSequence.fromList(SLinkOperations.getChildren(newFile, LINKS.tracks$JKtl)));
    }
    return existing;
  }

  private static void addToMidiFile(InputStream in, SNode fileNode) throws Exception {
    try {
      readHeaderMagic(in);
      int headerLength = nextU32(in);
      if (headerLength != 6) {
        throw new Exception(String.format("Expected header length = 6, got '%d'", headerLength));

      }

      byte[] headerBytes = new byte[headerLength];
      in.read(headerBytes);

      SNode header = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53dL, "Midi.structure.Header"));
      InputStream headerStream = new ByteArrayInputStream(headerBytes);
      readHeaderFormat(headerStream, header);
      int numTracks = readHeaderNumTracks(headerStream);
      readHeaderDivision(headerStream, header);
      SLinkOperations.setTarget(fileNode, LINKS.header$JJZj, header);

      for (int i = 0; i < numTracks; i += 1) {
        readTrackMagic(in);
        int trackLength = nextU32(in);
        byte[] trackBytes = new byte[trackLength];
        in.read(trackBytes);

        SNode track = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53fL, "Midi.structure.Track"));
        InputStream trackStream = new ByteArrayInputStream(trackBytes);
        readTrackEvents(trackStream, track);

        ListSequence.fromList(SLinkOperations.getChildren(fileNode, LINKS.tracks$JKtl)).addElement(track);
      }

    } catch (IOException ex) {
      throw new Exception(String.format("Exception reading MIDI file: %s", ex));
    }
  }

  private static void readHeaderMagic(InputStream in) throws IOException, Exception {
    char[] magic = new char[]{nextChar(in), nextChar(in), nextChar(in), nextChar(in)};

    if (!(new String(magic).equals("MThd"))) {
      throw new Exception(String.format("Could not read header magic (MThd) - Read '%s'", new String(magic)));
    }
  }

  private static void readHeaderFormat(InputStream in, SNode header) throws IOException, Exception {
    in.read();

    int format = in.read();
    switch (format) {
      case 0:
        SPropertyOperations.assignEnum(header, PROPS.format$Mot0, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a548L, "Midi.structure.ChunkFormat"), 0x7c255ef75678a549L, "single_multi_channel_track"));
        break;
      case 1:
        SPropertyOperations.assignEnum(header, PROPS.format$Mot0, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a548L, "Midi.structure.ChunkFormat"), 0x7c255ef75678a54bL, "simultaneous_tracks"));
        break;
      case 2:
        SPropertyOperations.assignEnum(header, PROPS.format$Mot0, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a548L, "Midi.structure.ChunkFormat"), 0x7c255ef75678a550L, "sequentially_independent_single_track_patterns"));
        break;
      default:
        throw new Exception(String.format("Unexpected Header Format '%d'", format));
    }
  }

  private static void readHeaderDivision(InputStream in, SNode header) throws IOException {
    int divisionNum = nextU16(in);

    int flag = divisionNum >> 15;

    if (flag == 0) {
      SNode ticksPerQ = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a56bL, "Midi.structure.TicksPerQuarterNote"));
      SPropertyOperations.assign(ticksPerQ, PROPS.ticks$MMGO, divisionNum);
      SLinkOperations.setTarget(header, LINKS.division$s8vF, ticksPerQ);
    } else {
      int smpteFormat = (divisionNum >> 8) & 0b01111111;
      int ticksPerFrame = divisionNum & 0xFF;
      SNode timecode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a573L, "Midi.structure.Timecode"));
      SPropertyOperations.assign(timecode, PROPS.ticks_per_frame$NgHQ, ticksPerFrame);

      switch (smpteFormat) {
        case 0b111000:
          SPropertyOperations.assignEnum(timecode, PROPS.rate$Ng0N, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a576L, "Midi.structure.TimecodeRate"), 0x7c255ef75678a57fL, "fps_24"));
          break;

        case 0b111001:
          SPropertyOperations.assignEnum(timecode, PROPS.rate$Ng0N, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a576L, "Midi.structure.TimecodeRate"), 0x7c255ef75678a582L, "fps_25"));
          break;

        case 0b111101:
          SPropertyOperations.assignEnum(timecode, PROPS.rate$Ng0N, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a576L, "Midi.structure.TimecodeRate"), 0x7c255ef75678a587L, "fps_29_97_drop_frame"));
          break;

        case 0b111110:
          SPropertyOperations.assignEnum(timecode, PROPS.rate$Ng0N, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a576L, "Midi.structure.TimecodeRate"), 0x7c255ef75678a58eL, "fps_30"));
          break;
      }
      SLinkOperations.setTarget(header, LINKS.division$s8vF, timecode);

    }
  }


  private static int readHeaderNumTracks(InputStream in) throws IOException {
    return nextU16(in);
  }

  private static void readTrackMagic(InputStream in) throws IOException, Exception {
    char[] magic = new char[]{nextChar(in), nextChar(in), nextChar(in), nextChar(in)};

    if (!(new String(magic).equals("MTrk"))) {
      throw new Exception(String.format("Could not read track magic (MTrk) - Read '%s's", new String(magic)));
    }
  }

  private static void readTrackEvents(InputStream in, SNode track) throws IOException, Exception {
    while (true) {
      int deltaTime = nextVariableLength(in);
      int firstEvtByte = in.read();
      if (firstEvtByte == -1) {
        return;
      }

      if (firstEvtByte == 0xF0 || firstEvtByte == 0xF7) {
        int sysexEvtLen = nextVariableLength(in);
        byte[] sysexBody = new byte[sysexEvtLen];
        in.read(sysexBody);
        readSysexEvent(sysexBody, deltaTime, track);
      } else if (firstEvtByte == 0xFF) {
        readMetaEvent(in, deltaTime, track);
      } else {
        readMidiEvent(in, deltaTime, track);
      }

    }
  }

  private static void readSysexEvent(byte[] body, int deltaTime, SNode track) throws IOException, Exception {
    if (body[body.length - 1] != 0xF7) {
      throw new Exception(String.format("Expected sysex event to end in 0xF7 - ended in '%x'", body[body.length - 1]));
    }
  }

  private static void readMetaEvent(InputStream in, int deltaTime, SNode track) throws IOException, Exception {
    int textLen;
    byte[] textData;

    switch (in.read()) {
      case 0x00:
        int seqNumData = in.read();
        if (seqNumData != 0x02) {
          throw new Exception(String.format("Invalid Meta-Event - expected 0x02 for Seq Number. Got '%x'", seqNumData));
        }

        SNode seqNum = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756dd9414L, "Midi.structure.SequenceNumber"));
        SPropertyOperations.assign(seqNum, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(seqNum);
        break;

      case 0x01:
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode textEvent = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e108afL, "Midi.structure.TextEvent"));
        SPropertyOperations.assign(textEvent, PROPS.data$dIXu, new String(textData));
        SPropertyOperations.assign(textEvent, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(textEvent);
        break;

      case 0x02:
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode copyright = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e1609bL, "Midi.structure.CopyrightNotice"));
        SPropertyOperations.assign(copyright, PROPS.data$dIXu, new String(textData));
        SPropertyOperations.assign(copyright, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(copyright);
        break;

      case 0x03:
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode seqOrTrackName = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e198e1L, "Midi.structure.SequenceOrTrackName"));
        SPropertyOperations.assign(seqOrTrackName, PROPS.data$dIXu, new String(textData));
        SPropertyOperations.assign(seqOrTrackName, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(seqOrTrackName);
        break;

      case 0x04:
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode insrumentName = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e1f0fbL, "Midi.structure.InstrumentName"));
        SPropertyOperations.assign(insrumentName, PROPS.data$dIXu, new String(textData));
        SPropertyOperations.assign(insrumentName, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(insrumentName);
        break;

      case 0x05:
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode lyric = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e22a4bL, "Midi.structure.LyricText"));
        SPropertyOperations.assign(lyric, PROPS.data$dIXu, new String(textData));
        SPropertyOperations.assign(lyric, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(lyric);
        break;

      case 0x06:
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode marker = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e25da1L, "Midi.structure.Marker"));
        SPropertyOperations.assign(marker, PROPS.data$dIXu, new String(textData));
        SPropertyOperations.assign(marker, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(marker);
        break;

      case 0x07:
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode cue = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e29a28L, "Midi.structure.CuePoint"));
        SPropertyOperations.assign(cue, PROPS.data$dIXu, new String(textData));
        SPropertyOperations.assign(cue, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(cue);
        break;

      case 0x20:
        int midiPrefixMagic = in.read();
        if (midiPrefixMagic != 0x01) {
          throw new Exception(String.format("Invalid Meta-Event - expected 0x01 for Midi Channel Prefix, Got '%x'", midiPrefixMagic));
        }

        int channelPrefix = in.read();
        textLen = nextVariableLength(in);
        textData = new byte[textLen];
        in.read(textData);

        SNode channelPrefixAssign = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e2d382L, "Midi.structure.MidiChannelPrefixAssignment"));
        SPropertyOperations.assign(channelPrefixAssign, PROPS.channel$sPFC, channelPrefix);
        SPropertyOperations.assign(channelPrefixAssign, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(channelPrefixAssign);
        break;

      case 0x2F:
        int endofTrackMagic = in.read();
        if (endofTrackMagic != 0x00) {
          throw new Exception(String.format("Invalid Meta-Event - expected 0x00 for End Of Track, Got '%x'", endofTrackMagic));
        }

        SNode endOfTrack = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e30ce1L, "Midi.structure.EndOfTrack"));
        SPropertyOperations.assign(endOfTrack, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(endOfTrack);
        break;

      case 0x51:
        int setTempoMagic = in.read();
        if (setTempoMagic != 0x03) {
          throw new Exception(String.format("Invalid Meta-Event - expected 0x03 for Set Tempo, Got '%x'", setTempoMagic));
        }

        int a = (in.read() & 0xFF) << 16;
        int b = (in.read() & 0xFF) << 8;
        int c = (in.read() & 0xFF);

        SNode setTempo = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e34c5dL, "Midi.structure.SetTempo"));
        SPropertyOperations.assign(setTempo, PROPS.microseconds_per_quarter_note$t7G2, a | b | c);
        SPropertyOperations.assign(setTempo, PROPS.deltaTime$wbRX, deltaTime);
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(setTempo);
        break;

      case 0x54:
        int smpteOffsetMagic = in.read();
        if (smpteOffsetMagic != 0x05) {
          throw new Exception(String.format("Invalid Meta-Event - expected 0x05 for SMPTE Offset, Got '%x'", smpteOffsetMagic));
        }

        SNode smpteOffset = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e38587L, "Midi.structure.SmpteOffset"));
        SPropertyOperations.assign(smpteOffset, PROPS.deltaTime$wbRX, deltaTime);
        SPropertyOperations.assign(smpteOffset, PROPS.hour$7NVM, in.read());
        SPropertyOperations.assign(smpteOffset, PROPS.minute$87S7, in.read());
        SPropertyOperations.assign(smpteOffset, PROPS.frame$aZOn, in.read());
        SPropertyOperations.assign(smpteOffset, PROPS.fractional_frames$YPsc, in.read());
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(smpteOffset);
        break;

      case 0x58:
        int timeSignatureMagic = in.read();
        if (timeSignatureMagic != 0x04) {
          throw new Exception(String.format("Invalid Meta-Event - expected 0x04 for Time Signature, Got '%x'", timeSignatureMagic));
        }

        SNode timeSig = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3c574L, "Midi.structure.TimeSignature"));
        SPropertyOperations.assign(timeSig, PROPS.deltaTime$wbRX, deltaTime);
        SPropertyOperations.assign(timeSig, PROPS.numerator$mlAp, in.read());
        SPropertyOperations.assign(timeSig, PROPS.denominator$oQ55, in.read());
        SPropertyOperations.assign(timeSig, PROPS.midi_clocks_per_metronome_click$p5l6, in.read());
        SPropertyOperations.assign(timeSig, PROPS.thirty_second_notes_in_quarter_note$pR4q, in.read());
        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(timeSig);
        break;

      case 0x7F:
        int dataLength = nextVariableLength(in);

        SNode seqSpecificEvt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e43857L, "Midi.structure.SequencerSpecificEvent"));
        SPropertyOperations.assign(seqSpecificEvt, PROPS.deltaTime$wbRX, deltaTime);
        for (int i = 0; i < dataLength; i += 1) {
          SNode byt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22f867851L, "Midi.structure.Byte"));
          SPropertyOperations.assign(byt, PROPS.data$Xqfh, in.read());
          ListSequence.fromList(SLinkOperations.getChildren(seqSpecificEvt, LINKS.bytes$T7bc)).addElement(byt);
        }

        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(seqSpecificEvt);
        break;

      case 0x59:
        int keySigMagic = in.read();
        if (keySigMagic != 0x02) {
          throw new Exception(String.format("Invalid Meta-Event - expected 0x02 for Key Signature, Got '%d'", keySigMagic));
        }

        SNode keySig = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3fef2L, "Midi.structure.KeySignature"));
        switch (in.read()) {
          case 0xF9:
            SPropertyOperations.assignEnum(keySig, PROPS.sf$pM$g, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb7e4L, "Midi.structure.KeySharpFlats"), 0x7c255ef756ebb7e5L, "flats_7"));
            break;
          case 0xFF:
            SPropertyOperations.assignEnum(keySig, PROPS.sf$pM$g, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb7e4L, "Midi.structure.KeySharpFlats"), 0x7c255ef756ebb81fL, "flat_1"));
            break;
          case 0x00:
            SPropertyOperations.assignEnum(keySig, PROPS.sf$pM$g, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb7e4L, "Midi.structure.KeySharpFlats"), 0x7c255ef756ebb837L, "key_of_c"));
            break;
          case 0x01:
            SPropertyOperations.assignEnum(keySig, PROPS.sf$pM$g, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb7e4L, "Midi.structure.KeySharpFlats"), 0x7c255ef756ebb850L, "sharp_1"));
            break;
          case 0x07:
            SPropertyOperations.assignEnum(keySig, PROPS.sf$pM$g, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb7e4L, "Midi.structure.KeySharpFlats"), 0x7c255ef756ebb86aL, "sharps_7"));
            break;
        }

        if (in.read() == 1) {
          SPropertyOperations.assignEnum(keySig, PROPS.mi$q6w_, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb890L, "Midi.structure.KeyMajorMinor"), 0x7c255ef756ebb8c1L, "minor"));
        } else {
          SPropertyOperations.assignEnum(keySig, PROPS.mi$q6w_, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756ebb890L, "Midi.structure.KeyMajorMinor"), 0x7c255ef756ebb891L, "major"));
        }

        ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(keySig);
        break;
    }

  }

  private static void readMidiEvent(InputStream in, int deltaTime, SNode track) throws IOException {
    int evtKey = in.read();

    if ((evtKey & 0b11110000) == 0b10000000) {
      SNode evt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, "Midi.structure.NoteOff"));
      SPropertyOperations.assign(evt, PROPS.channel$zFVx, evtKey & 0b00001111);
      SPropertyOperations.assign(evt, PROPS.deltaTime$wbRX, deltaTime);
      SNode keyCode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae959L, "Midi.structure.KeyCode"));
      SPropertyOperations.assign(keyCode, PROPS.note_number$z1Zu, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.key$z2G2, keyCode);

      SNode velocity = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L, "Midi.structure.VelocityValue"));
      SPropertyOperations.assign(velocity, PROPS.velocity$zfAR, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.velocity$z9gu, velocity);
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(evt);
    } else if ((evtKey & 0b11110000) == 0b10010000) {
      SNode evt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, "Midi.structure.NoteOn"));
      SPropertyOperations.assign(evt, PROPS.channel$1Joc, evtKey & 0b00001111);
      SPropertyOperations.assign(evt, PROPS.deltaTime$wbRX, deltaTime);
      SNode keyCode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae959L, "Midi.structure.KeyCode"));
      SPropertyOperations.assign(keyCode, PROPS.note_number$z1Zu, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.key$zlHK, keyCode);

      SNode velocity = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L, "Midi.structure.VelocityValue"));
      SPropertyOperations.assign(velocity, PROPS.velocity$zfAR, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.velocity$zlWL, velocity);
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(evt);
    } else if ((evtKey & 0b11110000) == 0b10100000) {
      SNode evt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae974L, "Midi.structure.PolyphonicKeyPressure"));
      SPropertyOperations.assign(evt, PROPS.channel$aOoQ, evtKey & 0b00001111);
      SPropertyOperations.assign(evt, PROPS.deltaTime$wbRX, deltaTime);
      SNode keyCode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae959L, "Midi.structure.KeyCode"));
      SPropertyOperations.assign(keyCode, PROPS.note_number$z1Zu, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.key$zn5r, keyCode);

      SNode pressure = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fafdf79L, "Midi.structure.Pressure"));
      SPropertyOperations.assign(pressure, PROPS.pressure$n_Xj, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.pressure$znks, pressure);
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(evt);
    } else if ((evtKey & 0b11110000) == 0b10110000) {
      SNode evt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae987L, "Midi.structure.ControlChange"));
      SPropertyOperations.assign(evt, PROPS.channel$W2Nr, evtKey & 0b00001111);
      SPropertyOperations.assign(evt, PROPS.deltaTime$wbRX, deltaTime);
      SNode ctrl = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae996L, "Midi.structure.Controller"));
      SPropertyOperations.assign(ctrl, PROPS.controller_number$zOdj, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.controller$z_QV, ctrl);

      SNode val = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae99eL, "Midi.structure.ControllerValue"));
      SPropertyOperations.assign(val, PROPS.value$zVeN, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.value$zA5W, val);
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(evt);
    } else if ((evtKey & 0b11110000) == 0b11000000) {
      SNode evt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9a7L, "Midi.structure.ProgramChange"));
      SPropertyOperations.assign(evt, PROPS.deltaTime$wbRX, deltaTime);
      SPropertyOperations.assign(evt, PROPS.channel$gK6u, evtKey & 0b00001111);
      SPropertyOperations.assign(evt, PROPS.program_number$zX6s, in.read() & 0b01111111);
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(evt);
    } else if ((evtKey & 0b11110000) == 0b11010000) {
      SNode evt = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9b2L, "Midi.structure.ChannelPressure"));
      SPropertyOperations.assign(evt, PROPS.deltaTime$wbRX, deltaTime);
      SPropertyOperations.assign(evt, PROPS.channel$zv10, evtKey & 0b00001111);
      SNode pressure = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fafdf79L, "Midi.structure.Pressure"));
      SPropertyOperations.assign(pressure, PROPS.pressure$n_Xj, in.read() & 0b01111111);
      SLinkOperations.setTarget(evt, LINKS.pressure$$auO, pressure);
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(evt);
    } else if ((evtKey & 0b11110000) == 0b10110000) {
      SNode msg = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c4L, "Midi.structure.ChannelMode"));
      SPropertyOperations.assign(msg, PROPS.deltaTime$wbRX, deltaTime);
      SPropertyOperations.assign(msg, PROPS.channel$Ejpl, evtKey & 0b00001111);
      int c = in.read() & 0b01111111;
      int v = in.read() & 0b01111111;
      if (c == 122 && v == 0) {
        SPropertyOperations.assignEnum(msg, PROPS.mode$BePV, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L, "Midi.structure.ChannelModeOptions"), 0x7c255ef7567ae9c7L, "local_control_off"));
      } else if (c == 122 && v == 127) {
        SPropertyOperations.assignEnum(msg, PROPS.mode$BePV, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L, "Midi.structure.ChannelModeOptions"), 0x7c255ef7567ae9caL, "local_control_on"));
      } else if (c == 123 && v == 0) {
        SPropertyOperations.assignEnum(msg, PROPS.mode$BePV, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L, "Midi.structure.ChannelModeOptions"), 0x7c255ef7567ae9cdL, "all_notes_off"));
      } else if (c == 124 && v == 0) {
        SPropertyOperations.assignEnum(msg, PROPS.mode$BePV, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L, "Midi.structure.ChannelModeOptions"), 0x7c255ef7567ae9d2L, "omni_mode_off"));
      } else if (c == 125 && v == 0) {
        SPropertyOperations.assignEnum(msg, PROPS.mode$BePV, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L, "Midi.structure.ChannelModeOptions"), 0x7c255ef7567ae9d9L, "omni_mode_on"));
      } else if (c == 126) {
        SPropertyOperations.assign(msg, PROPS.number_of_channels$LGqD, v);
        SPropertyOperations.assignEnum(msg, PROPS.mode$BePV, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L, "Midi.structure.ChannelModeOptions"), 0x7c255ef7567ae9dfL, "mono_mode_on"));
      } else if (c == 127 && v == 0) {
        SPropertyOperations.assignEnum(msg, PROPS.mode$BePV, SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c6L, "Midi.structure.ChannelModeOptions"), 0x7c255ef7567ae9e7L, "poly_mode_on"));
      }
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(msg);
    } else if (evtKey == 11110000) {
      SNode msg = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fdafb1eL, "Midi.structure.SystemExclusiveMessage"));
      int curr = in.read();
      while (curr != 0b11110111) {
        SNode b = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22f867851L, "Midi.structure.Byte"));
        SPropertyOperations.assign(b, PROPS.data$Xqfh, curr);
        ListSequence.fromList(SLinkOperations.getChildren(msg, LINKS.data$GgGl)).addElement(b);
      }
      ListSequence.fromList(SLinkOperations.getChildren(track, LINKS.events$fAV3)).addElement(msg);
    }
  }

  private static int nextU16(InputStream in) throws IOException {
    int a = (in.read() & 0xFF) << 8;
    int b = in.read() & 0xFF;

    return a | b;
  }

  private static int nextVariableLength(InputStream in) throws IOException {
    Deque<Integer> numComps = LinkedListSequence.fromLinkedList(new LinkedList<Integer>());

    int latestVal = in.read();
    LinkedListSequence.fromLinkedListNew(numComps).addElement(latestVal);
    while ((latestVal & 0b10000000) > 0) {
      latestVal = in.read();
      LinkedListSequence.fromLinkedListNew(numComps).addElement(latestVal);
    }

    if (LinkedListSequence.fromLinkedListNew(numComps).count() == 1) {
      int a = LinkedListSequence.fromLinkedListNew(numComps).getElement(0);
      return a;
    } else if (LinkedListSequence.fromLinkedListNew(numComps).count() == 2) {
      int a = (LinkedListSequence.fromLinkedListNew(numComps).getElement(0) & 0xFF) << 8;
      int b = LinkedListSequence.fromLinkedListNew(numComps).getElement(1) & 0xFF;

      return a | b;
    } else if (LinkedListSequence.fromLinkedListNew(numComps).count() == 3) {
      int a = (LinkedListSequence.fromLinkedListNew(numComps).getElement(0) & 0xFF) << 16;
      int b = (LinkedListSequence.fromLinkedListNew(numComps).getElement(1) & 0xFF) << 8;
      int c = LinkedListSequence.fromLinkedListNew(numComps).getElement(2) & 0xFF;


      return a | b | c;
    } else {
      int a = (LinkedListSequence.fromLinkedListNew(numComps).getElement(0) & 0xFF) << 24;
      int b = (LinkedListSequence.fromLinkedListNew(numComps).getElement(1) & 0xFF) << 16;
      int c = (LinkedListSequence.fromLinkedListNew(numComps).getElement(2) & 0xFF) << 8;
      int d = LinkedListSequence.fromLinkedListNew(numComps).getElement(3) & 0xFF;

      return a | b | c | d;
    }
  }

  private static int nextU32(InputStream in) throws IOException {
    int a = (in.read() & 0xFF) << 24;
    int b = (in.read() & 0xFF) << 16;
    int c = (in.read() & 0xFF) << 8;
    int d = in.read() & 0xFF;

    return a | b | c | d;
  }

  private static char nextChar(InputStream in) throws IOException {
    return (char) (in.read() & 0xFF);
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty format$Mot0 = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53dL, 0x7c255ef75678a559L, "format");
    /*package*/ static final SProperty ticks$MMGO = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a56bL, 0x7c255ef75678a570L, "ticks");
    /*package*/ static final SProperty ticks_per_frame$NgHQ = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a573L, 0x7c255ef75678a59bL, "ticks_per_frame");
    /*package*/ static final SProperty rate$Ng0N = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a573L, 0x7c255ef75678a598L, "rate");
    /*package*/ static final SProperty deltaTime$wbRX = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL, 0x7c255ef7567ae938L, "deltaTime");
    /*package*/ static final SProperty data$dIXu = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae942L, 0x7c255ef756dff39aL, "data");
    /*package*/ static final SProperty channel$sPFC = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e2d382L, 0x7c255ef756e5ecaeL, "channel");
    /*package*/ static final SProperty microseconds_per_quarter_note$t7G2 = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e34c5dL, 0x7c255ef756e75757L, "microseconds_per_quarter_note");
    /*package*/ static final SProperty hour$7NVM = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e38587L, 0x7c255ef756e953eaL, "hour");
    /*package*/ static final SProperty minute$87S7 = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e38587L, 0x7c255ef756e95400L, "minute");
    /*package*/ static final SProperty frame$aZOn = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e38587L, 0x7c255ef756e95431L, "frame");
    /*package*/ static final SProperty fractional_frames$YPsc = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e38587L, 0x7c255ef756ea5761L, "fractional_frames");
    /*package*/ static final SProperty numerator$mlAp = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3c574L, 0x7c255ef756eb2624L, "numerator");
    /*package*/ static final SProperty denominator$oQ55 = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3c574L, 0x7c255ef756eb2630L, "denominator");
    /*package*/ static final SProperty midi_clocks_per_metronome_click$p5l6 = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3c574L, 0x7c255ef756eb2647L, "midi_clocks_per_metronome_click");
    /*package*/ static final SProperty thirty_second_notes_in_quarter_note$pR4q = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3c574L, 0x7c255ef756eb2688L, "thirty_second_notes_in_quarter_note");
    /*package*/ static final SProperty data$Xqfh = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22f867851L, 0x6e18fdd22f867853L, "data");
    /*package*/ static final SProperty sf$pM$g = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3fef2L, 0x7c255ef756ebb8e3L, "sf");
    /*package*/ static final SProperty mi$q6w_ = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e3fef2L, 0x7c255ef756ebb8f9L, "mi");
    /*package*/ static final SProperty channel$zFVx = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, 0x7c255ef756f4bfd5L, "channel");
    /*package*/ static final SProperty note_number$z1Zu = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae959L, 0x7c255ef7567ae95dL, "note_number");
    /*package*/ static final SProperty velocity$zfAR = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L, 0x7c255ef7567ae96cL, "velocity");
    /*package*/ static final SProperty channel$1Joc = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, 0x7c255ef756f94688L, "channel");
    /*package*/ static final SProperty channel$aOoQ = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae974L, 0x7c255ef756f99103L, "channel");
    /*package*/ static final SProperty pressure$n_Xj = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fafdf79L, 0x6e18fdd22fafdf9eL, "pressure");
    /*package*/ static final SProperty channel$W2Nr = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae987L, 0x7c255ef756fac245L, "channel");
    /*package*/ static final SProperty controller_number$zOdj = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae996L, 0x7c255ef7567ae99aL, "controller_number");
    /*package*/ static final SProperty value$zVeN = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae99eL, 0x7c255ef7567ae9a2L, "value");
    /*package*/ static final SProperty channel$gK6u = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9a7L, 0x7c255ef756fbf694L, "channel");
    /*package*/ static final SProperty program_number$zX6s = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9a7L, 0x7c255ef7567ae9a9L, "program_number");
    /*package*/ static final SProperty channel$zv10 = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9b2L, 0x7c255ef756fc6edbL, "channel");
    /*package*/ static final SProperty channel$Ejpl = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c4L, 0x7c255ef756fe2ffeL, "channel");
    /*package*/ static final SProperty mode$BePV = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c4L, 0x7c255ef7567ae9f1L, "mode");
    /*package*/ static final SProperty number_of_channels$LGqD = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9c4L, 0x7c255ef757030832L, "number_of_channels");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink header$JJZj = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, 0x7c255ef75678a540L, "header");
    /*package*/ static final SContainmentLink tracks$JKtl = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, 0x7c255ef75678a542L, "tracks");
    /*package*/ static final SContainmentLink division$s8vF = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53dL, 0x7c255ef756792641L, "division");
    /*package*/ static final SContainmentLink events$fAV3 = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53fL, 0x7c255ef7567ae9f6L, "events");
    /*package*/ static final SContainmentLink bytes$T7bc = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756e43857L, 0x6e18fdd22f867856L, "bytes");
    /*package*/ static final SContainmentLink key$z2G2 = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, 0x7c255ef7567ae961L, "key");
    /*package*/ static final SContainmentLink velocity$z9gu = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, 0x7c255ef7567ae968L, "velocity");
    /*package*/ static final SContainmentLink key$zlHK = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, 0x7c255ef7567ae970L, "key");
    /*package*/ static final SContainmentLink velocity$zlWL = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, 0x7c255ef7567ae971L, "velocity");
    /*package*/ static final SContainmentLink key$zn5r = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae974L, 0x7c255ef7567ae975L, "key");
    /*package*/ static final SContainmentLink pressure$znks = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae974L, 0x7c255ef7567ae976L, "pressure");
    /*package*/ static final SContainmentLink controller$z_QV = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae987L, 0x7c255ef7567ae988L, "controller");
    /*package*/ static final SContainmentLink value$zA5W = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae987L, 0x7c255ef7567ae989L, "value");
    /*package*/ static final SContainmentLink pressure$$auO = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae9b2L, 0x7c255ef7567ae9b7L, "pressure");
    /*package*/ static final SContainmentLink data$GgGl = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x6e18fdd22fdafb1eL, 0x6e18fdd22fdafb24L, "data");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept File$g = MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, "Midi.structure.File");
  }
}
