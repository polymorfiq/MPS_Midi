package Midi.make.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.make.delta.IDelta;
import java.util.LinkedList;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.project.facets.GenerationTargetFacet;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.nio.file.Files;
import java.nio.file.Path;
import java.io.IOException;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.internal.make.runtime.util.DeltaKey;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.FileOutputStream;
import Midi.behavior.ByteSized__BehaviorDescriptor;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.smodel.resources.DResource;
import jetbrains.mps.make.script.IConfig;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class MakeMidi_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("Midi.make.MakeMidi");
  public MakeMidi_Facet() {
    ListSequence.fromList(targets).addElement(new Target_buildWasmFiles());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.make.facets.Generate")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new TargetProperties();
  }
  public static class Target_buildWasmFiles implements ITargetEx {
    private static final ITarget.Name name = new ITarget.Name("Midi.make.MakeMidi.buildWasmFiles");
    public Target_buildWasmFiles() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_v8oiv_a0a = null;
          final Iterable<GResource> input = (Iterable<GResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              final List<IDelta> deltas = ListSequence.fromList(new LinkedList<IDelta>());

              monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("[Midi.make] Starting Binary Generation of MIDI...")));

              for (final GResource resource : Sequence.fromIterable(input)) {
                GenerationTargetFacet generationFacet = resource.module().getFacet(GenerationTargetFacet.class);

                String moduleName = resource.module().getModuleName();
                final Wrappers._T<String> outputPath = new Wrappers._T<String>(null);
                if (generationFacet != null && moduleName != null) {
                  outputPath.value = generationFacet.getOutputLocation(resource.model()).toRealPath();

                  try {
                    Files.createDirectories(Path.of(outputPath.value));
                  } catch (IOException err) {
                    monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(String.format("Could not create directory (%s): %s", outputPath.value, err))));
                  }
                }

                if (outputPath.value != null) {
                  monitor.getSession().getProject().getRepository().getModelAccess().runReadAction(() -> {
                    for (SModel model : CollectionSequence.fromCollection(resource.status().getOutputModels())) {
                      final FilesDelta d = new FilesDelta(new DeltaKey(model.getModule(), model));

                      {
                        SearchScope scope_v8oiv_c0a0a0a0a6a4a0a0 = CommandUtil.createScope(model);
                        final SearchScope scope_v8oiv_c0a0a0a0a6a4a0a0_0 = scope_v8oiv_c0a0a0a0a6a4a0a0;
                        QueryExecutionContext context = () -> scope_v8oiv_c0a0a0a0a6a4a0a0_0;
                        Iterable<SNode> files = CommandUtil.instances(CommandUtil.selectScope(null, context), CONCEPTS.File$g, false);
                        Sequence.fromIterable(files).visitAll((file) -> {
                          try {
                            Path pathToFile = Path.of(outputPath.value, SPropertyOperations.getString(file, PROPS.name$MnvL) + ".mid");

                            FileOutputStream stream = new FileOutputStream(pathToFile.toFile());

                            try {
                              stream.write(ByteSized__BehaviorDescriptor.bytes_id7K_nJtmDrGV.invoke(file));
                            } catch (IOException e) {
                              monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("[Midi.make] failed to write to binary file: " + e)));
                            }

                            stream.flush();
                            stream.close();

                            FileSystem localFs = FileSystem.getInstance();
                            d.written(localFs.getFile(pathToFile.toString()));

                            monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("[Midi.make] generated" + pathToFile.toString())));
                          } catch (IOException e) {
                            monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("[Midi.make] failed to generate binary file: " + e)));
                          }
                        });
                      }

                      ListSequence.fromList(deltas).addElement(d);
                    }
                  });

                }
              }

              _output_v8oiv_a0a = Sequence.fromIterable(_output_v8oiv_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new DResource(deltas))));
              return new IResult.SUCCESS(_output_v8oiv_a0a);
            default:
              progressMonitor.done();
              return new IResult.SUCCESS(_output_v8oiv_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Generate.generate")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.reconcile")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(GResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
      } catch (RuntimeException re) {
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept File$g = MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75678a53cL, "Midi.structure.File");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
