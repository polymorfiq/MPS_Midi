package MetaMidi.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptArpeggio = createDescriptorForArpeggio();
  /*package*/ final ConceptDescriptor myConceptChord = createDescriptorForChord();
  /*package*/ final ConceptDescriptor myConceptEventList = createDescriptorForEventList();
  /*package*/ final ConceptDescriptor myConceptMajorChord = createDescriptorForMajorChord();
  /*package*/ final ConceptDescriptor myConceptNote = createDescriptorForNote();
  /*package*/ final EnumerationDescriptor myEnumerationNoteName = new EnumerationDescriptor_NoteName();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, "Midi");
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, "Midi");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptArpeggio, myConceptChord, myConceptEventList, myConceptMajorChord, myConceptNote);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Arpeggio:
        return myConceptArpeggio;
      case LanguageConceptSwitch.Chord:
        return myConceptChord;
      case LanguageConceptSwitch.EventList:
        return myConceptEventList;
      case LanguageConceptSwitch.MajorChord:
        return myConceptMajorChord;
      case LanguageConceptSwitch.Note:
        return myConceptNote;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationNoteName);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForArpeggio() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaMidi", "Arpeggio", 0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757a97c04L);
    b.class_(false, false, false);
    // extends: Midi.structure.TrackEvent
    b.super_(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL);
    b.origin("r:a90fdff5-2f3c-4579-9b63-f5d2f00b9cd0(MetaMidi.structure)/8945660651262016516");
    b.version(3);
    b.property("loops", 0x7c255ef757aa80f3L).type(PrimitiveTypeId.INTEGER).origin("8945660651262083315").done();
    b.property("pause", 0x7c255ef757aa8129L).type(PrimitiveTypeId.INTEGER).origin("8945660651262083369").done();
    b.aggregate("chord", 0x7c255ef757aa805eL).target(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aec6d8L).optional(false).ordered(true).multiple(false).origin("8945660651262083166").done();
    b.alias("arpeggio");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChord() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaMidi", "Chord", 0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aec6d8L);
    b.interface_();
    b.origin("r:a90fdff5-2f3c-4579-9b63-f5d2f00b9cd0(MetaMidi.structure)/8945660651262363352");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaMidi", "EventList", 0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757ad7b8aL);
    b.class_(false, false, false);
    b.origin("r:a90fdff5-2f3c-4579-9b63-f5d2f00b9cd0(MetaMidi.structure)/8945660651262278538");
    b.version(3);
    b.aggregate("events", 0x7c255ef757ad7bc3L).target(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL).optional(true).ordered(true).multiple(true).origin("8945660651262278595").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMajorChord() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaMidi", "MajorChord", 0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aa7fc7L);
    b.class_(false, false, false);
    b.parent(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aec6d8L);
    b.origin("r:a90fdff5-2f3c-4579-9b63-f5d2f00b9cd0(MetaMidi.structure)/8945660651262083015");
    b.version(3);
    b.property("root", 0x7c255ef757aaf596L).type(MetaIdFactory.dataTypeId(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aa7e55L)).origin("8945660651262113174").done();
    b.alias("major");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaMidi", "Note", 0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aec7e5L);
    b.class_(false, false, false);
    b.origin("r:a90fdff5-2f3c-4579-9b63-f5d2f00b9cd0(MetaMidi.structure)/8945660651262363621");
    b.version(3);
    b.property("name", 0x7c255ef757aec829L).type(MetaIdFactory.dataTypeId(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aa7e55L)).origin("8945660651262363689").done();
    return b.create();
  }
}
