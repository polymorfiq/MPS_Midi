package MetaMidi.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Note__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aec7e5L, "MetaMidi.structure.Note");

  public static final SMethod<SNode> withName_id7K_nJtnFHM0 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("withName").modifiers(1, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651262368896L).languageId(0x8909a29a1d64fb03L, 0x3ba274977a154e85L).build2(SMethodBuilder.createJavaParameter((Class<SEnumerationLiteral>) ((Class) Object.class), ""));
  public static final SMethod<SNode> toMidi_id7K_nJtnITs8 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toMidi").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651263203080L).languageId(0x8909a29a1d64fb03L, 0x3ba274977a154e85L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(withName_id7K_nJtnFHM0, toMidi_id7K_nJtnITs8);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode withName_id7K_nJtnFHM0(@NotNull SAbstractConcept __thisConcept__, SEnumerationLiteral name) {
    SNode newNote = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aec7e5L, "MetaMidi.structure.Note"));
    SPropertyOperations.assignEnum(newNote, PROPS.name$XCpV, name);
    return newNote;
  }
  /*package*/ static SNode toMidi_id7K_nJtnITs8(@NotNull SNode __thisNode__) {
    SNode note = null;

    switch (enumSwitchIndex.indexNullable(SPropertyOperations.getEnum(__thisNode__, PROPS.name$XCpV))) {
      case 0:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568a6f0eL, "Midi.structure.GSharp3"));
        break;
      case 1:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568adfb0L, "Midi.structure.A3"));
        break;
      case 2:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568b25ebL, "Midi.structure.ASharp3"));
        break;
      case 3:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568b25ebL, "Midi.structure.ASharp3"));
        break;
      case 4:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568bbaa8L, "Midi.structure.B3"));
        break;
      case 5:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75684a677L, "Midi.structure.C3"));
        break;
      case 6:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568702a8L, "Midi.structure.CSharp3"));
        break;
      case 7:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568702a8L, "Midi.structure.CSharp3"));
        break;
      case 8:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756878009L, "Midi.structure.D3"));
        break;
      case 9:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75687f143L, "Midi.structure.DSharp3"));
        break;
      case 10:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75687f143L, "Midi.structure.DSharp3"));
        break;
      case 11:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75688561cL, "Midi.structure.E3"));
        break;
      case 12:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75688df3cL, "Midi.structure.F3"));
        break;
      case 13:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756896e6dL, "Midi.structure.FSharp3"));
        break;
      case 14:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef756896e6dL, "Midi.structure.FSharp3"));
        break;
      case 15:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef75689ebe0L, "Midi.structure.G3"));
        break;
      case 16:
        note = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7568a6f0eL, "Midi.structure.GSharp3"));
        break;
    }

    return note;
  }

  /*package*/ Note__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((SNode) toMidi_id7K_nJtnITs8(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) withName_id7K_nJtnFHM0(concept, (SEnumerationLiteral) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aa7e55L, 0x7c255ef757ab87bbL, 0x7c255ef757ab87e8L, 0x7c255ef757ab880cL, 0x7c255ef757ab8831L, 0x7c255ef757ab886bL, 0x7c255ef757aa7e56L, 0x7c255ef757ab858eL, 0x7c255ef757ab85b5L, 0x7c255ef757ab862aL, 0x7c255ef757ab866dL, 0x7c255ef757ab8692L, 0x7c255ef757ab86b8L, 0x7c255ef757ab86d5L, 0x7c255ef757ab86f3L, 0x7c255ef757ab8726L, 0x7c255ef757ab8764L, 0x7c255ef757ab8785L);

  private static final class PROPS {
    /*package*/ static final SProperty name$XCpV = MetaAdapterFactory.getProperty(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757aec7e5L, 0x7c255ef757aec829L, "name");
  }
}
