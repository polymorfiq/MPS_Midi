package MetaMidi.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.InsertMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import MetaMidi.behavior.Chord__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import MetaMidi.behavior.Note__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import java.util.Collection;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.InsertMacroQuery;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Iterable<SNode> sourceNodesQuery_0_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.events$yG3K);
  }
  public static SNode insertMacro_Query_0_0(final InsertMacroContext _context) {
    final SNode output = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757ad7b8aL, "MetaMidi.structure.EventList"));
    Iterable<SNode> notes = Chord__BehaviorDescriptor.notes_id7K_nJtnFGsG.invoke(SLinkOperations.getTarget(_context.getNode(), LINKS.chord$LIVU));

    for (int i = 0; i < SPropertyOperations.getInteger(_context.getNode(), PROPS.loops$Sdhw); i++) {
      Sequence.fromIterable(notes).visitAll((note) -> {
        SNode noteOn = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, "Midi.structure.NoteOn"));
        SPropertyOperations.assign(noteOn, PROPS.deltaTime$wbRX, 0);
        SLinkOperations.setTarget(noteOn, LINKS.key$zlHK, Note__BehaviorDescriptor.toMidi_id7K_nJtnITs8.invoke(note));
        SPropertyOperations.assign(noteOn, PROPS.channel$1Joc, 0);

        SNode baseVelocity = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L, "Midi.structure.VelocityValue"));
        SPropertyOperations.assign(baseVelocity, PROPS.velocity$zfAR, 100);
        SLinkOperations.setTarget(noteOn, LINKS.velocity$zlWL, baseVelocity);
        ListSequence.fromList(SLinkOperations.getChildren(output, LINKS.events$yG3K)).addElement(noteOn);


        SNode noteOff = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, "Midi.structure.NoteOff"));
        SPropertyOperations.assign(noteOff, PROPS.deltaTime$wbRX, SPropertyOperations.getInteger(_context.getNode(), PROPS.pause$SM$Z));
        SLinkOperations.setTarget(noteOff, LINKS.key$z2G2, Note__BehaviorDescriptor.toMidi_id7K_nJtnITs8.invoke(note));
        SPropertyOperations.assign(noteOff, PROPS.channel$zFVx, 0);

        SNode offBaseVelocity = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L, "Midi.structure.VelocityValue"));
        SPropertyOperations.assign(offBaseVelocity, PROPS.velocity$zfAR, 100);
        SLinkOperations.setTarget(noteOff, LINKS.velocity$z9gu, offBaseVelocity);


        ListSequence.fromList(SLinkOperations.getChildren(output, LINKS.events$yG3K)).addElement(noteOff);
      });
    }

    return output;
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("8945660651263534898", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_0(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InsertMacroQuery> imqMethods = new HashMap<String, InsertMacroQuery>();
  {
    imqMethods.put("8945660651263132530", new IMQ(0));
  }
  @NotNull
  @Override
  public InsertMacroQuery getInsertMacroQuery(@NotNull QueryKey queryKey) {
    InsertMacroQuery query = queryKey.forTemplateNode(imqMethods);
    return (query != null ? query : super.getInsertMacroQuery(queryKey));
  }
  private static class IMQ implements InsertMacroQuery {
    private final int methodKey;
    /*package*/ IMQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull InsertMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.insertMacro_Query_0_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink events$yG3K = MetaAdapterFactory.getContainmentLink(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757ad7b8aL, 0x7c255ef757ad7bc3L, "events");
    /*package*/ static final SContainmentLink chord$LIVU = MetaAdapterFactory.getContainmentLink(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757a97c04L, 0x7c255ef757aa805eL, "chord");
    /*package*/ static final SContainmentLink key$zlHK = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, 0x7c255ef7567ae970L, "key");
    /*package*/ static final SContainmentLink velocity$zlWL = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, 0x7c255ef7567ae971L, "velocity");
    /*package*/ static final SContainmentLink key$z2G2 = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, 0x7c255ef7567ae961L, "key");
    /*package*/ static final SContainmentLink velocity$z9gu = MetaAdapterFactory.getContainmentLink(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, 0x7c255ef7567ae968L, "velocity");
  }

  private static final class PROPS {
    /*package*/ static final SProperty deltaTime$wbRX = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae92aL, 0x7c255ef7567ae938L, "deltaTime");
    /*package*/ static final SProperty channel$1Joc = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae96fL, 0x7c255ef756f94688L, "channel");
    /*package*/ static final SProperty velocity$zfAR = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae964L, 0x7c255ef7567ae96cL, "velocity");
    /*package*/ static final SProperty pause$SM$Z = MetaAdapterFactory.getProperty(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757a97c04L, 0x7c255ef757aa8129L, "pause");
    /*package*/ static final SProperty channel$zFVx = MetaAdapterFactory.getProperty(0x35a3fd90d0264551L, 0xaa863ed1bd51d7c6L, 0x7c255ef7567ae94eL, 0x7c255ef756f4bfd5L, "channel");
    /*package*/ static final SProperty loops$Sdhw = MetaAdapterFactory.getProperty(0x3ba274977a154e85L, 0x8909a29a1d64fb03L, 0x7c255ef757a97c04L, 0x7c255ef757aa80f3L, "loops");
  }
}
