package MidiImporter.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.fileChooser.FileChooser;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import Midi.BinaryHelpers.BytesToMidi;
import com.intellij.notification.Notifications;
import com.intellij.notification.Notification;
import com.intellij.notification.NotificationType;

public class ImportMidiFile_Action extends BaseAction {
  private static final Icon ICON = null;

  public ImportMidiFile_Action() {
    super("Import MIDI file...", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.NONE);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.MODEL);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final VirtualFile chosenFile = FileChooser.chooseFile(FileChooserDescriptorFactory.createSingleFileDescriptor("mid"), event.getData(CommonDataKeys.PROJECT), null);

    if (chosenFile == null) {
      // Cancelled the dialog
      return;
    }

    event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(() -> {
      try {
        BytesToMidi.importData(chosenFile.getPath(), chosenFile.getNameWithoutExtension(), event.getData(MPSCommonDataKeys.MODEL));
      } catch (Exception exception) {
        Notifications.Bus.notify(new Notification("JSON Importer", "Import failed", exception.getMessage(), NotificationType.ERROR), event.getData(CommonDataKeys.PROJECT));
      }
    });

  }
}
